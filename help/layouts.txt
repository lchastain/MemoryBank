https://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html

JScrollPane has its own layout: ScrollPaneLayout. If you want to use any other, you don't set it on the
  scroll pane itself, you put a JPanel inside it and set the layout on that panel.

Needs:
    1.  Different height rows in a single column:
        Obvious choice is GridBagLayout, but there is a 'wrapping' alternative for the single-column case:
        Use an outermost panel with a BoxLayout (Y_AXIS).  Its size can be set with a setPreferredSize call
            if that works, otherwise an override of getPreferredSize.  See notes for that layout for more info.
        Add rows as panels that allow stretching of their content (Border or Box) or disallow it (Flow).
            The height of these inner panels can be set directly but possibly not by the makeup of their components.
        Update - using this alternative with LinkTargetSelectionPanel, which is close to how it's done in most NoteGroups,
            but have trouble with multiple rows inside the 2nd (last) row of the outermost panel - something wrong.
            BUT didn't track it down; just built my additonal text lines into a single text area vs multiple rows
            of JLabels.  Better solution anyway, but it leaves this question unanswered, for now.

    2.  Horizontal layout, with one component stretching to fill the remaining available width:
        use a DndLayout, with that component named 'Stretch'.


FlowLayout
    FlowLayout is the default layout manager for every JPanel. It simply lays out components in a single row,
    starting a new row if its container is not sufficiently wide.
        Good for left or right justified, non-stretchable content.
            new FlowLayout(FlowLayout.LEFT, hgap, vgap));
                    default hgap and vgap if not specified is 5, NOT zero.

BorderLayout
    Holds up to 5 components, in North, South, East, West, and Center.
    The Center will stretch to fill the area.  The North and South components
    fill the width so that they 'sandwich' the West, Center, and East.
    If viewed as rows, you would see Row 1: North,
    Row 2: West, Center, East, and
    Row 3: South
        new BorderLayout();

BoxLayout
        new BoxLayout(container, direction);
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        It stretches its components BUT that can be disabled because it will respect your overrides of getMaximumSize
            and getPreferredSize; some others (like GridLayout?) will not.
        Disabling stretching, however, does NOT disable centering within the available space.
        If your content preferred size is less than container size, it WILL center them, horizontally or vertically.
        No matter what you do to reduce the height, if you succeed then it will just go to some other row.

GridLayout
        GridLayout()     (defaults to 1,0,?,?)
        GridLayout(int rows, int cols)
        GridLayout(int rows, int cols, int hgap, int vgap)
        Creates a grid layout with the specified number of rows and columns. All components in the layout are given
        equal size. One, but not both, of rows and cols can be zero, which means that any number of objects in that
        dimension is not limited.
        (Used for MonthView, YearView, several other places)
        It stretches its components.
        If the number of components added exceeds the column/row total, columns beyond the specified limit are added.
        Setting the number of columns has no affect on the layout if the number of rows specified by a constructor or
        by the setRows method is non-zero. In that case, the number of columns displayed in the layout is determined
        by the total number of components and the number of rows specified.

GridBagLayout
        This is the only one that allows you to set Insets.

CardLayout
        This MAY be a better way to swap out panels - depends on whether or not you can 'see' the tabs but that comes
        from a JTabbedPane, not the layout, so maybe...    Otherwise, the swapped panels need to be
        revalidated/invalidated and repainted - see YearView headerPanel.  If CardLayout swaps don't need the repaint
        and don't have extra visuals then this would be the better choice.

GroupLayout

SpringLayout
    SpringLayout is very low-level and as such you really should only use it with a GUI builder, rather than
    attempting to code a spring layout manager by hand.  (advice from the internet; not my own words).

TableLayout
    An older awt (not swing) package available from Oracle.  Very close to GridBagLayout but allows you to
    set rows and columns and their sizes in its constructor.  Can be adapted to swing with minimal effort.
    Allows for empty 'cells'.

========================================================================
DndLayout
        My own, custom layout manager.
        It lays out components in a single left-justified horizontal line.
        The left-justification is needed when an outer layout manager places the containing panel.
           When that happens, a FlowLayout would center the components.
        It horizontally stretches the component named 'Stretch', to the remaining width of the JPanel
          that contains that component.  Override the panel's preferred width, to make it stretch.
          Primarily useful for JTextFields.
        No need to 'name' any other component.
        It supports a 'Drag and Drop' feature, for column reordering.
           For the Dnd, you need some extra plumbing - see the Dnd-capable NoteGroups; those will have
           a 'header' row; a secondary class that implements a needed interface and gets them the rest of the way.

ColumnPanel  (used in Flashcards)
    Not in itself a Layout, but a Container/Panel that implements a specific GridBagLayout that has only one
    column.  There is an 'addRow' method to use, whereby the content does not need to match the dimensions
    of content in other rows.  GridBagConstraints are all defaulted but can be overridden if needed.




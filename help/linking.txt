Entities such as Notes and Groups can be linked to other Notes and Groups, to show that there is a relationship
  between them.  The 'LinkagesEditorPanel' is the dialog where linkages are created, manually sorted, or removed.
  Currently (Aug 2020) the editor dialog presents the only 'view' of the linkages.

The dialog is invoked for a NoteData via its context menu.
  CURRENTLY there is no way to call up the editor for a NoteGroup, but the intent is that there will be an option
    for groups (Goals, Events, Calendar Notes, Todo Lists) on the main menu bar.

<STARTING to reconsider this, at least at the 'Group' level >
SearchResultData will not be linked to any other note or group, because that would make it
  appear as though there are duplicates, when viewing the linkages of the various targets.
  And, a SearchResult has a 'FoundInFile' field that is similar to a LinkData in that it can be
  used to get to the original note, and THAT one can be linked to some other Note or Group.
  Also a grouping of Search results is a kind of link already, connecting that grouping and each
  of its results with the original entity that was found.

When a link is created, a LinkedEntityData holds the relationship.  The data is stored in a list that is kept by
  the source entity, and is thought of as a 'forward' link, FROM that source entity TO a target entity.  But at the
  same time, a 'reverse' link is created and kept with the target entity, so that a target can 'know' what other
  entities have been linked to it.

LinkedEntityData - A single instance of a link to another NoteGroup or NoteData.
  A LinkedEntityData extends BaseData and also has these members:
     targetGroupProperties - (transient) the full properties of the target group
     targetNoteData - (transient) the full target NoteData, or null if the target is the full group
     targetGroupInfo - the GroupInfo of the target entity
     targetNoteInfo - the NoteInfo (if any; could be null) of the target entity
     linkType - the type of relationship that the source has with the target.
          See the class definition for the list of enumerated values.
     reversed - a boolean to indicate if this is a reverse link (true) or a forward link (false, default)
  A Vector of LinkedEntityData (named linkTargets) is a class member of both NoteData and NoteGroup.
  When source info is needed during link operations, it will come from the entity that contains the
     linkTargets vector.

Reverse Links -
  A reverse link is made from a forward link, and has the forward link's source as its target (group and note, if
  there is one).  The type value will be a reversal of the forward type, if possible; otherwise it remains the same
  (such as 'related').  The boolean member - 'reversed' will be 'true', to indicate the link is reversed, because
  otherwise it will look just like a forward link and the user might not realize that they had made this link
  from the other end.  A reverse link has a different visual representation in the dialog than a forward link.

Links and Reverse Links are needed for proper visualization of the relationships between all entities, but they can
  present a management nightmare.  For a more in-depth elaboration on this, see the 'Change Management' section, below.





=============================================================================================================
Change Management:

  Consider a case where the text of an entity has been modified - do we go through all its reverse links to
  correct the text on all their corresponding forward links, possbily across several different groups?  The short
  answer is 'No'; the overhead for that level of processing at that time is just too costly, for too little value
  added.  The consequences of such a change can be dealt with more efficiently later, if and when those affected links
  are viewed.

  Once created (and saved), links (either forward or reverse) shall be non-editable.  There are already too many other
  factors to consider, to try to keep the text in sync with the target entity, and the text of the source entity is
  not contained within the link data anyway.  The only change (other than removal) that is allowed on a link after it
  has been created is its order within the list, which affects the order in which it is viewed.

  So what if the source or target text had changed so much that the links no longer make sense?  At least the links
  probably did make sense initially, and that is why the text that is within the link (as well as the link type) should
  NOT be changed.

  If a change is needed in terms of the target text or link type, the user must delete the link themselves and then
  they can recreate it if still desired.  The selection of the target entity in the new link will automatically
  populate the link's target text correctly with the current text of the target.  A new link type could also or
  alternatively be set at that time.


discuss deletions and the connection to reverse -

  Deletions do make it possible for a forward link to exist without having a reverse.  We can live with that, and it
    is a simple matter for the user to fix, if they even notice.  The 'fix' would be to delete the lone forward
    link and then recreate it, rather than adding the missing reverse directly.  Less likely to occur would be to
    have a reverse link when there is no corresponding forward one, but there may be some combination of user-initiated
    events or anomalous conditions that cause such a situation; if so then presumably the same 'fix' methodology would
    apply here as well.





      Need to address group name changes, copied/pasted note with links, group deletions, group show/no-show.

      User makes mods to link sources or targets - what happens?
        Could just let the users delete and recreate their links that go stale

 This just leaves the possiblity that they got it wrong, in which case they can recall the
    dialog and delete the link, then make it again.  And that leads to one other possible problem - we were not
    going to try to keep the two links in sync after their initial creation, so what if one or the other is
    deleted?  The decision here is that if a reverse link is deleted, do nothing else.  But if a forward link
    is deleted, try to find the reverse link, and delete it if found. (the only way it would not be found is if the
    group or note that held it had gone away, or it had been explicitly removed, all of which equate to a no-op needed.)

    So it seems like a reverse link cannot exist without its forward link, unless group/note deletion does not cascade down
    to the link management.  Do we want to look for all links when deleting a Group or a Note? ?????????????
    Upon showing links, 'targets' can be searched and along with setting the 'show me' flag, an auto-delete condition
      could kick in, if the target group or note no longer exists at all, vs exists but not being shown.


  it is still possible for the user to make changes to the text of the notes
  themselves (either source or target).  Making the links immutable reduces the complexity of this problem somewhat,
  but there are still many conditions to consider (we were not
                                                       going to try to keep the two links in sync after their initial creation).




------------------------------------------------------------------------------------------------------------
2.  A linked Note is altered, moved, or removed:
    The linkages Vector is updated to reflect the result of the change.  This will be done from
    a view containing the source or if one end of the link is a Goal then a removal could be done from there.
    If the current view was the Goal then the removal will be seen there immediately.  Otherwise there is not
    (currently) any visual indication in a NoteGroup that a link has changed.

3.  After a linked Note has been changed in a group with an 'Undo' menu, and then 'Undo' is selected:
    If it had been removed then the Note will come back but the link will not.  This is acceptable because it
      is in line with the behavior of the new 'remove' menu option for a Group, where if undo is used after a
      removal then the file is restored but not reselected.  Lost links would have to be reestablished manually
      by the user, after the note was restored via an undo.
    If it was a change of text then the link remains in its changed form (that has now been undone), until it
      is displayed.  (NO NO - but maybe a color change) At display, all links are updated from the source and target, first.  This approach will keep
      it in sync with the note in its current state.

4.  A Group is renamed:
    The GroupProperties list is scanned for the presence of this group's ID, and its entry is updated.
    Not precisely a link operation but listed here because this methodology (along with the GroupProperties list) was
        established while designing the LinkNoteComponent, as an alternative to having the group names in
        all the links, vs just having ther IDs.  The real need is for a database table, where group IDs can be
        quickly looked up to retrieve the group name.  Not needed before now for two reasons - first, the group
        name has been the file name, not stored elsewhere and only used within the group, and second, there was no
        need to get the group name via some other group feature with a unique value, as there is now via the
        LinkedNoteData that has group IDs.

5.  A Group is removed:
    The linkages list is scanned for the presence of this group.  All links containing it are also removed.
    If the removal is undone, links must be restored manually by the user, if so desired.  The GroupProperties list is
    also scanned and the associated entry removed from there, but only after the ability to undo the removal has
    gone away. (HOW?  or - if the removal was done immediately and the undo could check the list for this group and
    restore it also, if needed)

===================================================================================================================


Goal Display of Links - Scan the list of links for the Goal ID
1.  If found, check each one to see if the other end is in a currently showing Group.
    a.  If so - search for the other end in that Group.
        1) If found, update the link with its info, even if no changes had been made.  This is a catch-all.
        2) If not found, just remove it. (this could happen after an addition of a note and linking it, and then an undo)
    b.  If the related group is not showing, verify that it at least exists.
        1) if not then delete this link from the overall list.
            This may be double work, now that there is a GroupProperties list planned.  May not be needed.
        2) if the other group exists then keep this note, but not shown.
            It may eventually be verified (by 2a) if/when the group is again shown.
2.  If not found - you are done.


For the LinkTargetSelectionPanel implementation, click on an expandable - expands if not already,
and puts the title on the right, and issues a 'select a group' message.
Selecting a group then loads it for individual NoteData selection.





Link Viewing -
  The links of a source entity will be shown when the LinkagesEditorPanel for that entity is displayed.
  The panel can be called up for a Group from the main menu "Edit Linkages" item, or from an individual
  note from its context menu.


Link Sorting - only done for Links where a Goal is on one end, done from the Goal panel.
    (still working this design, but) - A manual sort, with the effects going directly back to the overall list
    of links.  Other links will just keep their relative positions.  If one todo list item applies to more than
    one goal - no problem; there will be two separate links in that case.   OR -
    Keep a list of linked IDs, in the Goal properties, to use in sorting.  But that list would need more management.
    Also need to decide - new Links come in to the list at the top, or bottom?
    Could the LinkTargetSelectionPanel also allow a manual sort?  Beneficial, but could complicate matters especially if it is
    used to move a link that connects to a Goal that has a different sort order.
    All TBD.


-------------------------------------------------------------------------------------------------------------------


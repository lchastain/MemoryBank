Development notes for MemoryBank - record of roadblocks, accomplishments, and
DESIGN DECISIONs (upper-cased in text below for a quick search).
(If this project ever gets uploaded to GitHub, remove this file from git and manage separately)

7/28/2019 0646 - Restarted, in Izhevsk, while still awaiting household shipment.  Continuing the addition of
 having multiple users, the front end is ready to provide a new user id so now this app needs to be able to
 receive it upon startup.  But - need to refamiliarize myself with this app before making possibly
 catastrophic changes.  First baby-step:  broke apart setting of program data loc from user data loc.

3/10/2019 1434 - Now relatively stable with the two parallel projects and the ways to run them, and have
 documented much of the configuration, so now it is time to forge ahead with new functionalities.  The first
 one is to allow different users, and it should use the same underlying auth method and store for both the
 web app and the desktop app.  Since it is a 'wrapper' type of functionality that will access the underlying
 auth store via the web, it can go into the new project rather than here.  Overall app-related, it seems that
 the WebSwing access method will be the best for both a desktop app as well as a web one, so that the 'real'
 java class files can be hidden in either case.  This would call for a change here, to develop a custom
 browser window that automatically goes to the webswing app only.  That can come much later; can still use
 the pure-desktop app in the meanwhile.

3/6/2019 0820 - Have been looking into getting tomcat to host webswing along with my ww app, and webswing to
 serve out this swing app, along with a Grand Jury duty distraction (that evaporated yesterday).  There is some
 trouble with setting the location for program data, and I have just seen that my debug printouts do not work
 because the debug parameter is not evaluated until after the data locations are set.  So - considering options
 and will make a change here, then redeploy the mbank.jar to webswing under tomcat.  The process to get this all
 up and working was not a smooth one, and has not yet been documented for repeatability, but that is needed.

3/3/2019 1728 - The idea to host my WebSwing server via heroku - not going to work, because that solution is a
 Ruby On Rails (RoR) site, and more importantly, to get heroku to take code requires it to come from GitHub.  So -
 I may just put a link there, that connects us back to my new site that could eventually be hosted on domain.net.
 Meanwhile, can host it locally until I decide to put up the $$ needed for hosting.

3/1/2019 - Working with the switchover project (WhatWhen) - found WebSwing, that can run THIS app as-is!  So now,
 looking for a way to merge the two projects, keeping web stuff in that one and keeping this app working the way
 it always has, with new work as needed and without the need to change the data storage methodology (much).

2/24/2019 1142 - Ok, now see / remember.  Back in June, tried to get the latest (2018 build) to run on Adele.  It starts
up ok but hangs on configuring the tree, unable to find some referenced logging class(es).  So the 'fix' was to go back
to the 2014 build.  Then, moved on to other priorities and left it that way.  So now, can try harder.  The latest run
from within IJ - does not have the priority button problem of going forward for a right mouse click, so the expected
solution here is to do a good, latest build and put it into place.
1152 - The first problem was the classpath to the external jars I brought in, now in C:\jars, and the fact that I was
running from a script file that had not been updated to supply that path.  But the wrong priority direction problem
is still there, probably fixed since the 2014 build, or just needs a rebuild under this now much later version of Java.
Command-line building is not working, several errors/complaints.  But it works ok from IJ?
1500 - Solved command-line build by extracting IconNoteData out to its own file, vs being embedded in the component file.
Other xNoteData elements don't complain; not sure why this one did.  Maybe due to inheritance?
1550 - Solved the PriorityButton always-increasing problem, sort of.  The behavior comes from Java 10, whereas my IJ is
older now and cannot go beyond Java 8, so it still works correctly.  So for now, only, the fix is to change the launch
shortcut so that it uses Java 8 vs Java 10.  ie, no code change was needed.  During this investigation, made a few more
mbank.jar files, the latest one was taken from IJ output.  That's how we got here, in case it comes up in the future.
And it matters somewhat, because Java 8 cannot run code built by Java 10, so I did update the shortcut and the batch
files for command-line management.

2/23/2019 2127 - App has been working on Adele since the last entry; don't remember what was needed, back then, or even
what exactly the problem was since I didn't say.  But now have started a new, post-retirement dev session and it is
working from IJ.  Now will work here only to fix problems, while the main effort will go towards a new, client-server
architecture, initial name 'WhatWhen', and going into a separate, new IJ project.  Will copy/steal from here as needed.
Will do a git commit now, to 'set' the current state.  It looks like that hasn't been done since 2014, possibly even
longer.

6/6/2018 1023 - Back here now, trying to get the new laptop (Adele) to work with this program.  It is running
on Java 10 but upon upgrading here, do not see the problem.  Need to dig deeper, to find it.  Intent is to restart
work here upon full retirement, but not there yet; this is just whatever is needed to run the app on the laptop.

3/20/2016 0810 Throttling of my dev work at CA, has sent me back to here as the best alternative to being
able to work ahead.  Highest concern was that the yearview was no longer sized correctly; found now that
it probably is, but the pane separator is taking space from it.  And I had done that because of having had so many
search results that there was an added vertical scrollbar, and its width caused the appearance of a horizontal
sb on the app tree, which I eliminated by moving over the pane separator.  So a quick, operational workaround is to
reduce the search results until the sb goes away, then restore the separator to its orig value.  Long-term - unknown.
Code changes so far today have been cosmetic, while I was refamiliarizing with the app.  Git update not (yet) needed.

2/7/2014 1916 - Have spent all day on reworking the vector of todolists and the saveAs
functionality, and I very much like the end result but there has been a dramatic change
in the inner workings, mostly due to the removal of the TodoLeaf class, which had been
isolating list changes from the vector that held the lists.  Previously there was a compelling
reason to null out the todoList so that it wouldn't save any new changes onto the old
list; now we still have a reason to null it but much less compelling, to the point that it
is almost not needed.  And the removal of the old list from the vector - no longer needed
at all because the name change goes there directly!  Previously, needed to remove it so that you
wouldn't retrieve it with those same changes again (during the same app run), as opposed to just
reloading the list from the filesystem.
Now, because of the straight-thru rename, it is the new list that should
be removed, because it still has the old title and so it should be reloaded.  It took a long time
to understand all that was and now is happening and why (along with rewriting it), and then after all that
understanding it only made sense to comment in the 'new' way, so that is why I'm putting
the 'where we came from' info here - just don't want to lose the history of it all.
The AppTree file is now at just over 1700 lines, down from > 2400.
May stop this work for a while, now.  Taxes are next on my to do list.

2/6/2014 1749 - All name checking code has been adopted and the TodoListManager has been
removed.  In the todoListHandler there was a 'selectList' method used by the handler for
a click on Search Results 'found in', that is now supported by the TodoBranchHelper, invoked
by a one-liner from the AppTree.  The important difference from the original behavior is that
the old way would add the todolist as a node into the tree if it was not already there.  The
new way does not do that.  It was a DESIGN DECISION that the original behavior was intrusive;
if I wanted to select that 'old' list, I would have, and now I have to go back and edit the
lists and remove it, and this will continue to happen.  So - we now have a way to 'select'
(programmatically) a todolist that is not showing in the tree.  Upon leaving of the leaf,
the user has no 'tree' path back to that view (but they can always repeat the click on the
search result).  One minor concern - when the list IS in the tree and we 'select' it, it
is not highlighted as a selection, as it would be if the user had clicked on it.  May be
able to 'fix' that but no pressing need atm.

2/5/2014 1348 - With the solution of the 'showAbout' toggle graphic problem, then added a
static mechanism whereby the TodoBranchHelper could acquire the app and make that call -
no longer need the 'filesystem sync needed' warning; just unshow the editor (by showing
the about graphic) and if they go back to the editor, it is reloaded based on existing files.
The TreeBranchEditor is now usable for all To Do list actions except for 'Add'; working on
that one next.  SCR #5 is resolved by the work done so far.
(before stopping for the day) - 'add' functionality now in place, now a menu choice when the
editor is showing.  Still need to add more name checking.

2/4/2014 1217 - Have been considering the problem of coordinating Tree changes with FileSystem
changes, and what to do when one of them (mostly the FileSystem changes) encounters trouble.
After a brief hope that Apache had the answer with its transactional file system changes library
(they now disavow that it works) - have decided to allow the tree changes and queue up FileSystem
complaints, still attempting every change vs bailing out at the first sign of trouble.  At the end,
if there are any complaints in the queue, will display them in a warning to the user and suggest
that they restart the app, to get back in sync.  DESIGN DECISION

2/3/2014 1734 The 'about' graphic has been getting cut off, when displayed a 2nd+ time.  Suspecting
my custom 'CenterViewportLayout', I found a better way to center items in a JScrollPane when they are
smaller than the available space - nesting inside a JPanel with a GridBagLayout.  Now - using that
and removing my custom code.  My code base continues to shrink, as I get more proficient with the
available tools.  But to be fair - some of these tool (and techniques) are fairly new.

2/3/2014 1241 - Spawn is heading towards a shutdown; we are all on standby until that happens, now.
Meanwhile, the TreeBranchEditor is done!  At least from the perspective of its stand-alone driver.
Now, want to GitHub it as a separate widget, and also integrate it into this app.  Also looking at
providing an executable version, maybe via my website.

1/30/2014 0945 (from Spawn) - The 'TreeBranchEditor' work has been underway since the last entry
and could go on for several more days, but it is already off to a great start; tree dnd is
working, and the design (in general) is done.  Implementation of features, then integration and
usage, will follow.  Right now - waiting for an 11am all-hands meeting to discuss Spawn future.

1/26/2014 0923 In trying to add the .bmp support, needed to add scaling to the icons displayed
in the chooser.  While the .bmp support did not work as desired (so I turned it back off), the
scaling did have the effect of resolving SCR #11 after all; now by showing slightly smaller
icons, their size more closely matches the folders and in the same space that previously showed
four rows of three columns, we now have six rows of four columns.  Part of this extra real estate
came from dropping the filename extensions from the chooser display.  SCR #7 remains unresolved.
1009 The next area to consider will be overall Tree manipulations.  This may touch on requests
from SCRs 4, 5, 23, the App Direction todolist item TodoList Management, and at least the 'rename'
item from the Search Issues list.  The idea is to implement a 'tree' editor where the branch under
consideration is shown on the right (like it already is, for 'Views' and 'Notes'), but 'editable' -
to include reordering, renaming, selection for display, deletion, and a way (context or main menu,
or both) to add a new one.  'TreeNodeEditor' ?

1/25/2014 1130 After casting around looking for the next big thing to do, have 'landed' on
rehabilitating the icon file handling.  It appears that .ico file reading had stopped working
and so I have found / started working with an external open source library for this - 'image4j'.
Have already seen that it can fix the .ico files, and it claims to also support .bmp files.
As well as repairing / adding these functionalities, this work will also hopefully rearchitect
the icon chooser (into its own class?) and clear up SCRs 7 & 11.

1/17/2014 1747 Fixed the last 'Major' issue - lost notes if 'Today' is chosen from the menubar.
Decided to overwrite the last snapshot with a new one for today, right now, because I have also
done the git commit this time, and it may be a good place to pause for a while.

1/17/2014 0903 Rename of treeOpts to appOpts seems to be done; no user benefit yet but it is still
a preparatory step to saving other items.
0925 - feeling that a re-arch is needed with regard to the app/frame/tree - the tree should not be
the one who is making and setting the MenuBar.  Need to break the bar out into its own class, that
is then applied to the frame by the app.  This will simplify the appTree class and make the overall
app easier to maintain.  Also considering - changing the 'options' class(es) to properties, to
standardize the access and make the 'config' file human-readable.  But that may not be needed, as
long as there is no need to change one of those vars outside of a program run.
1116 Ok, the menubar is moved, options are loaded by the Main, and the plaf is saved/restored.
This is a LOT of good progress but did it by taking half-steps; the MenuBar is its own class but
the 'tree' still sets and handles it, because I now see that 'Tree' is a mis-name; that class
does encapsulate a JTree but it is also the entire content of the JFrame, so it may not need to give
up so much control after all.  A better name would help, tho.  And even though the Main now loads
the options, the 'tree' still saves them.  Took a 'snapshot' of this version and put a copy over
to selofain, to get a look at the L&Fs there.

1/16/2014 1057 Now:  Add the plaf to the log.options, change log.options to app.options, provide a UI
for listing the installed plafs and making a choice.  Ensure a 'good' default is used.
1253 Now looking closer, I see that the log.options file was a leftover from 2006; we now have two
different options methods - one for the tree in its own file, and one each per todolist, in the
file for each list along with the items.  So - will defer any further changes, for now, and leave
the initial default as WindowsClassic.
1904 But on further thought - the tree.options really should be the app.options, and I have another
SCR asking to keep/use the separator width, so why not do the rename and add both new options?
Considering this; will pick it up in the morning.

1/15/2014 1030 - Additional research has discovered that the 'windows' plaf looks different on
    Windows7 when the 'Theme' is not Windows Classic.  These are two different issues; use of the
    Swing plaf, and use of the Windows 'Theme', which apparently has an effect on the look of the
    Swing plaf.  Prior to now, this app has relied on the system default to be 'correct', but ever
    since the 'Metal' plaf became a default for Swing, this app has overridden it to be the 'Windows'
    (not WindowsClassic) plaf, by leaving it at the default but placing a swing.properties file into
    the lib folder of the JVM that runs the app, to force that default to be 'Windows'.  That worked
    ok for Windows versions up to and including XP, but with Windows 7 Themes we are seeing problems.
    I have found/fixed two of these problems - the 'mixed' look can be cured by using the
    'WindowsClassic' (vs just windows) plaf in Swing, and the mixed look on the MonthView was
    unmixed by removing the 'setBackground' that appears to no longer be needed (but once was? - need
    to verify this by looking at the new code as it runs on XP).
    Finally, I want to stop the use of the swing.properties file.  Did that, and removed these lines
    from the InstallIssues file:
Need to put a 'swing.properties' file into the lib folder of the JVM:
(complete file is below, between the '==' lines)
=======================================================================
# Swing properties

swing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel
=======================================================================
For running the app from IntelliJ, the location is the jre\lib that
is under the current jdk location (not the standalone jre)

1/13/2014 1621 - It seems like the L&F problem comes down to two separate issues:
  1.  Some of the Win7 UIs are mixed; seems like a win7 labels mixed with metal buttons,
        backgrounds off-color or missing, just a strange / bad look.
  2.  Set lib L&F - control by a switch, vs landing on a 'default'.  Especially when the
        default must be placed in the 'swing.properties' file in the lib folder.  Need
        a better way.
Needs more research..   (now looks like the JTree may be going one way, while the rightPanel
goes a different plaf.  Still investigating, but may do San Antonio tomorrow).

1/12/2014 0926 - The effort this morning has been to see if there is any downside to pulling
NoteData out of NoteComponent; the reasons originally given for having the two classes in one
file are seeming increasingly invalid, and upcoming architectural changes will be better supported
if the data is separated from the visualization.  In the process of doing this, much more 'greening'
is being done, and I ran across another case of finding a long sequence of 'else if's following a
single deliberately irrelevant (and therefore empty) 'if' block.  This prompted me to want to go
back and reuse my 'no-op' solution but after spending about an hour to track it down, what I found
is that I never had one; I had done a rewrite so as to not need it.  That is probably the needed
solution for the new such cases I am finding during the 'greening' continuation.
Follow-up to that:  the next best thing to a no-op may be: System.out.print("");
1153 Embedded data classes removed from NoteComponent, DayNoteComponent, and an unnecessary
declaration that was made only to control compile order, was removed.
Next: clean up remaining 'xlint' issues, focus on L&F problems seen as a result of Win7 vs XP,
and classic vs default.  Do not believe that these are listed in the wishlist or the SCRs, but
it 'feels' like this is the area of greatest need.  This may be the beginning of the
rearchitecting effort.  One specific: bring back the query and listing of available L&F.
2145 - Finished cleaning out the 'xlint' errors, a good bit more greening.

1/11/2014 1131 - Continuing to rescrub the SCRs.  May have fixed the 'duplicate/lost to-do
item after a clear' issue; checked in a one-liner and will see.  Moved all current 'maintenance'
issues to major or minor problems after better defining that category.

1/10/2014 0942 - Took a look at the recurrence panel on an XP running Windows L&F, and it is good.
However, running the 'default', it is not.  This means:  We now need to handle different OSs AND
different L&Fs.  Maybe there is a framework that I can use for that, like web apps have?  After
research, short answer is NO; it simply does not (can not?) exist.  Next best thing: develop with
the UI portions as interfaces, provide a different implementation for each and detect/switch the
interface depending on the OS and other factors.
1046 After looking over the SCRs spreadsheet (and adding analysis for a couple of them, including
the nefarious 'duplicate or dropped' to-do items), I want/need to reconsider the overall architecture:
Of course I want this app to run everywhere and look great, but the 'cost' of trying to get there
from the current state seems too high.  As long as the app has as many problems as it does and I
am the only user, it seems that I should concentrate on the easiest track for me and just fix all
issues and add all new functionality first, using the platform/UI I am already working with but
converting to interfaces wherever the possibility for that is found.  When the app is
more ready for prime-time, it would then have at least one deliverable version, and the next phase
of work would all be towards going cross-platform, only.

1/9/2014 1002 - Finished 'greening' many classes, including the program Main and the AppTree.  Then
while looking at xlint complaints, saw output from the RecurrencePanel (events) so went there to see
how it functions - the L&F is all off (mostly too short containers for text labels), and verified
this is also the case when running from the older jar file.  Suspecting that this is a Win7 issue
and that XP may be ok; need to see it on whitey, but will put a copy over to selofain for future
reference.  This seems like a good point to make the next snapshot - the first rev after the rename.
1205 Just noticed that the global rename of 'log' to 'Memory Bank' also affected the SCRs.  That might
actually be ok except for the last two, which came from 'clog' and were addressing the naming
problems.  Restored those two from older copies, but now will update and resolve, anyway.

1/8/2014 0448 - The first rev of the new data location approach will not stand up to running the app
from a new .jar file if the jar is colocated with the dev code, because then it would use the dev
data and not the 'good' data loc.  Working on this..
0552 - Took a sidetrack to nail down questions on the swing.properties file - yes, it is still
needed and it IS still an installation issue.  While Windows 7 does not support a Win XP L&F,
we never developed for that one anyway, so the 'basic' / 'classic' Windows L&F CAN still be
specified, and it does look better, IMO.  Need to continue to consider it, so even if the
'InstallIssues.txt' file goes away, keep the info from it, somewhere.  But then, with regard to
the data naming and location issue, now adding more notes to that file anyway, so it is less
likely to 'go away'.
0631 As much as I liked the idea of running the 'installed' version right out of the dev loc,
and after considering keeping it that way by using program arguments, decided to leave the
data location decision as-is, and go back to having a separate 'installation' of the app in a
different location, where it does not have the appData subdirectory so it will revert to the
'official' data.
0652 So what remains on this is to choose a better name for the 'official' data directory,
and to continue fixing/changing the name from 'log' to 'mbank'.  Next up: the jar file and
name of the 'official' data.  Did those.
But to explain the reason for having 'appData' (dev env) named differently than 'mbankData'
(production) - just don't want to ever think that data that came from the dev side needs to be
preserved (even if it does, because in that case I should have put it on the 'production' side
either in the first place, or shortly after it was created).
0844 So now - the initial goals of the current effort have all been met:
1.  Resume the dev env and convert to Intellij
2.  Rename the program (and revisit deployment methods and locations)
3.  Rename the data (must not be the same as the app)
And we even got an extra:  can now have dev data, separate of production data.
Next:  clear out the stragglers - any class with its name starting in 'Log' - should get a
name change.
But first - I want to take the 'Better Programmer' test..    and it wasn't pretty.
1344 So back to it - class renamings started, and found the 'missing about' graphic cause: the
'about.gif' is not there!  Just copied the last one to a dateless name, to fix.  As
for how it HAS been working - probably there was one in the 'log' under Program Files, but
as for finding it in the source - it was not even in the one from 2011, so at some point
before that I must have renamed it to the latest dated one, and didn't see a break because
I wasn't running from a dev env location.
And apparently - I haven't really run from a dev location since 2008; back when I originally
created the about.gif file and put it into the production 'log' folder but not into the
development 'images' folder other than the one with the date in the name.
1403 Renamings all done with apparent success.  Now I want to make a new splash screen and
'about' gif; the previous one is waaay obe.
1852 Basic redesign is done; one font (and the overall background) needs tweaks.
2144 did those (after a long break; it didn't take that long).
Next:  clean up warnings from IJ and xlint; green-up the code as much as possible.

1/7/2014 - Cleared all older notes; moving forward with the new program name.
Next step: work on 'pub', and establishing a new name for the user data repo.
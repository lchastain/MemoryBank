Development notes for MemoryBank - record of roadblocks, accomplishments, and
DESIGN DECISIONs (upper-cased in text below for a quick search).
(If this project ever gets uploaded to GitHub, remove this file from git and manage separately)

1/25/2014 1130 After casting around looking for the next big thing to do, have 'landed' on
rehabilitating the icon file handling.  It appears that .ico file reading had stopped working
and so I have found / started working with an external open source library for this - 'image4j'.
Have already seen that it can fix the .ico files, and it claims to also support .bmp files.
As well as repairing / adding these functionalities, this work will also hopefully rearchitect
the icon chooser (into its own class?) and clear up SCRs 7 & 11.

1/17/2014 1747 Fixed the last 'Major' issue - lost notes if 'Today' is chosen from the menubar.
Decided to overwrite the last snapshot with a new one for today, right now, because I have also
done the git commit this time, and it may be a good place to pause for a while.

1/17/2014 0903 Rename of treeOpts to appOpts seems to be done; no user benefit yet but it is still
a preparatory step to saving other items.
0925 - feeling that a re-arch is needed with regard to the app/frame/tree - the tree should not be
the one who is making and setting the MenuBar.  Need to break the bar out into its own class, that
is then applied to the frame by the app.  This will simplify the appTree class and make the overall
app easier to maintain.  Also considering - changing the 'options' class(es) to properties, to
standardize the access and make the 'config' file human-readable.  But that may not be needed, as
long as there is no need to change one of those vars outside of a program run.
1116 Ok, the menubar is moved, options are loaded by the Main, and the plaf is saved/restored.
This is a LOT of good progress but did it by taking half-steps; the MenuBar is its own class but
the 'tree' still sets and handles it, because I now see that 'Tree' is a mis-name; that class
does encapsulate a JTree but it is also the entire content of the JFrame, so it may not need to give
up so much control after all.  A better name would help, tho.  And even though the Main now loads
the options, the 'tree' still saves them.  Took a 'snapshot' of this version and put a copy over
to selofain, to get a look at the L&Fs there.

1/16/2014 1057 Now:  Add the plaf to the log.options, change log.options to app.options, provide a UI
for listing the installed plafs and making a choice.  Ensure a 'good' default is used.
1253 Now looking closer, I see that the log.options file was a leftover from 2006; we now have two
different options methods - one for the tree in its own file, and one each per todolist, in the
file for each list along with the items.  So - will defer any further changes, for now, and leave
the initial default as WindowsClassic.
1904 But on further thought - the tree.options really should be the app.options, and I have another
SCR asking to keep/use the separator width, so why not do the rename and add both new options?
Considering this; will pick it up in the morning.

1/15/2014 1030 - Additional research has discovered that the 'windows' plaf looks different on
    Windows7 when the 'Theme' is not Windows Classic.  These are two different issues; use of the
    Swing plaf, and use of the Windows 'Theme', which apparently has an effect on the look of the
    Swing plaf.  Prior to now, this app has relied on the system default to be 'correct', but ever
    since the 'Metal' plaf became a default for Swing, this app has overridden it to be the 'Windows'
    (not WindowsClassic) plaf, by leaving it at the default but placing a swing.properties file into
    the lib folder of the JVM that runs the app, to force that default to be 'Windows'.  That worked
    ok for Windows versions up to and including XP, but with Windows 7 Themes we are seeing problems.
    I have found/fixed two of these problems - the 'mixed' look can be cured by using the
    'WindowsClassic' (vs just windows) plaf in Swing, and the mixed look on the MonthView was
    unmixed by removing the 'setBackground' that appears to no longer be needed (but once was? - need
    to verify this by looking at the new code as it runs on XP).
    Finally, I want to stop the use of the swing.properties file.  Did that, and removed these lines
    from the InstallIssues file:
Need to put a 'swing.properties' file into the lib folder of the JVM:
(complete file is below, between the '==' lines)
=======================================================================
# Swing properties

swing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel
=======================================================================
For running the app from IntelliJ, the location is the jre\lib that
is under the current jdk location (not the standalone jre)

1/13/2014 1621 - It seems like the L&F problem comes down to two separate issues:
  1.  Some of the Win7 UIs are mixed; seems like a win7 labels mixed with metal buttons,
        backgrounds off-color or missing, just a strange / bad look.
  2.  Set lib L&F - control by a switch, vs landing on a 'default'.  Especially when the
        default must be placed in the 'swing.properties' file in the lib folder.  Need
        a better way.
Needs more research..   (now looks like the JTree may be going one way, while the rightPanel
goes a different plaf.  Still investigating, but may do San Antonio tomorrow).

1/12/2014 0926 - The effort this morning has been to see if there is any downside to pulling
NoteData out of NoteComponent; the reasons originally given for having the two classes in one
file are seeming increasingly invalid, and upcoming architectural changes will be better supported
if the data is separated from the visualization.  In the process of doing this, much more 'greening'
is being done, and I ran across another case of finding a long sequence of 'else if's following a
single deliberately irrelevant (and therefore empty) 'if' block.  This prompted me to want to go
back and reuse my 'no-op' solution but after spending about an hour to track it down, what I found
is that I never had one; I had done a rewrite so as to not need it.  That is probably the needed
solution for the new such cases I am finding during the 'greening' continuation.
Follow-up to that:  the next best thing to a no-op may be: System.out.print("");
1153 Embedded data classes removed from NoteComponent, DayNoteComponent, and an unnecessary
declaration that was made only to control compile order, was removed.
Next: clean up remaining 'xlint' issues, focus on L&F problems seen as a result of Win7 vs XP,
and classic vs default.  Do not believe that these are listed in the wishlist or the SCRs, but
it 'feels' like this is the area of greatest need.  This may be the beginning of the
rearchitecting effort.  One specific: bring back the query and listing of available L&F.
2145 - Finished cleaning out the 'xlint' errors, a good bit more greening.

1/11/2014 1131 - Continuing to rescrub the SCRs.  May have fixed the 'duplicate/lost to-do
item after a clear' issue; checked in a one-liner and will see.  Moved all current 'maintenance'
issues to major or minor problems after better defining that category.

1/10/2014 0942 - Took a look at the recurrence panel on an XP running Windows L&F, and it is good.
However, running the 'default', it is not.  This means:  We now need to handle different OSs AND
different L&Fs.  Maybe there is a framework that I can use for that, like web apps have?  After
research, short answer is NO; it simply does not (can not?) exist.  Next best thing: develop with
the UI portions as interfaces, provide a different implementation for each and detect/switch the
interface depending on the OS and other factors.
1046 After looking over the SCRs spreadsheet (and adding analysis for a couple of them, including
the nefarious 'duplicate or dropped' to-do items), I want/need to reconsider the overall architecture:
Of course I want this app to run everywhere and look great, but the 'cost' of trying to get there
from the current state seems too high.  As long as the app has as many problems as it does and I
am the only user, it seems that I should concentrate on the easiest track for me and just fix all
issues and add all new functionality first, using the platform/UI I am already working with but
converting to interfaces wherever the possibility for that is found.  When the app is
more ready for prime-time, it would then have at least one deliverable version, and the next phase
of work would all be towards going cross-platform, only.

1/9/2014 1002 - Finished 'greening' many classes, including the program Main and the AppTree.  Then
while looking at xlint complaints, saw output from the RecurrencePanel (events) so went there to see
how it functions - the L&F is all off (mostly too short containers for text labels), and verified
this is also the case when running from the older jar file.  Suspecting that this is a Win7 issue
and that XP may be ok; need to see it on whitey, but will put a copy over to selofain for future
reference.  This seems like a good point to make the next snapshot - the first rev after the rename.
1205 Just noticed that the global rename of 'log' to 'Memory Bank' also affected the SCRs.  That might
actually be ok except for the last two, which came from 'clog' and were addressing the naming
problems.  Restored those two from older copies, but now will update and resolve, anyway.

1/8/2014 0448 - The first rev of the new data location approach will not stand up to running the app
from a new .jar file if the jar is colocated with the dev code, because then it would use the dev
data and not the 'good' data loc.  Working on this..
0552 - Took a sidetrack to nail down questions on the swing.properties file - yes, it is still
needed and it IS still an installation issue.  While Windows 7 does not support a Win XP L&F,
we never developed for that one anyway, so the 'basic' / 'classic' Windows L&F CAN still be
specified, and it does look better, IMO.  Need to continue to consider it, so even if the
'InstallIssues.txt' file goes away, keep the info from it, somewhere.  But then, with regard to
the data naming and location issue, now adding more notes to that file anyway, so it is less
likely to 'go away'.
0631 As much as I liked the idea of running the 'installed' version right out of the dev loc,
and after considering keeping it that way by using program arguments, decided to leave the
data location decision as-is, and go back to having a separate 'installation' of the app in a
different location, where it does not have the appData subdirectory so it will revert to the
'official' data.
0652 So what remains on this is to choose a better name for the 'official' data directory,
and to continue fixing/changing the name from 'log' to 'mbank'.  Next up: the jar file and
name of the 'official' data.  Did those.
But to explain the reason for having 'appData' (dev env) named differently than 'mbankData'
(production) - just don't want to ever think that data that came from the dev side needs to be
preserved (even if it does, because in that case I should have put it on the 'production' side
either in the first place, or shortly after it was created).
0844 So now - the initial goals of the current effort have all been met:
1.  Resume the dev env and convert to Intellij
2.  Rename the program (and revisit deployment methods and locations)
3.  Rename the data (must not be the same as the app)
And we even got an extra:  can now have dev data, separate of production data.
Next:  clear out the stragglers - any class with its name starting in 'Log' - should get a
name change.
But first - I want to take the 'Better Programmer' test..    and it wasn't pretty.
1344 So back to it - class renamings started, and found the 'missing about' graphic cause: the
'about.gif' is not there!  Just copied the last one to a dateless name, to fix.  As
for how it HAS been working - probably there was one in the 'log' under Program Files, but
as for finding it in the source - it was not even in the one from 2011, so at some point
before that I must have renamed it to the latest dated one, and didn't see a break because
I wasn't running from a dev env location.
And apparently - I haven't really run from a dev location since 2008; back when I originally
created the about.gif file and put it into the production 'log' folder but not into the
development 'images' folder other than the one with the date in the name.
1403 Renamings all done with apparent success.  Now I want to make a new splash screen and
'about' gif; the previous one is waaay obe.
1852 Basic redesign is done; one font (and the overall background) needs tweaks.
2144 did those (after a long break; it didn't take that long).
Next:  clean up warnings from IJ and xlint; green-up the code as much as possible.

1/7/2014 - Cleared all older notes; moving forward with the new program name.
Next step: work on 'pub', and establishing a new name for the user data repo.
12345678901234567890123456789012345678901234567890123456789012345678901234567890    80
Development notes for MemoryBank - record of issues and accomplishments.  Not comprehensive.

NEXT:  Big picture: Implement Auto-removal of reverse links.
    Immediate:  Change the implementation of GroupInfo.getNoteGroupDataAccessor in removeReverseLinks so that the
        result is that the group can be re-persisted without constructing a Panel.
      This required a rearchitecting of the app - repairs from that are underway.

moveToDayNote - fix in several places and calling contexts.
RESELECT app days if note added. - done, by nulling out appDays.
  Move to date when date not loaded into panel, saves a no-properties group data.




Questions:
        EventNoteGroupPanel has a commented-out addDayNote - an inherited method from ?

Info:

Broken, to fix later (and remember when restoring to also restore all calls/usages):
    addDayNote, in NoteGroupFile - commented out.  disabled in the accessor.  Use the base addNote method?
    doSearch, in AppTreePanel - commented out because it is too file-centric.  Needs rework.
    TodoNoteGroupPanel - saveAs and merge, chooseMergeFile - disabled for now.
    moveToDayNote, in TodoNoteComponent - commented out due to a call to addDayNote (and prettyName)
    EventNoteGroupPanel - ageEvents, merge, chooseMergeFile, saveAs - disabled.
    addNewGroup, in AppTreePanel, has one reachout about file name legality.  Do it differently.
    deleteGroup, in AppTreePanel, has one reachout to get a filename and delete the file.  Do it differently.
    getConsolidateView, in AppTreePanel, has one reachout to get a filename.  Do it differently.
    the four branch helpers in AppTreePanel.treeSelectionChanged - no longer active.  BranchHelper needs different param.
    moveToDayNote, in MilestoneComponent - commented out due to a call to addDayNote (and prettyName)
    event sorting not working...  even before, in pub.

New:
    searchResultGroup - was editable; moved a constructor line to ahead of group load.
    Better management of 'groupChanged', to handle external changes such as addNote (done external to panels).
    Added an 'addNote' method to NoteGroupPanel, to sync with the one in NoteGroup.
    Repaired the TodoNoteComponent moveToDayNote method, AND wrote a very robust test to cover 10 different scenarios.
    Check-in point.



=====================================================================================================
27 Oct 2020
    The GroupInfo.getNoteGroupDataAccessor - now makes and returns a NoteGroupFile, not a Panel.
    GroupInfo now has a getNoteGroup() method.  It will either give you the NoteGroup from a 'kept' Panel, or
        it will create and return a new NoteGroup, loading the file data if there is any.
    Added all the needed new NoteGroup classes.  Nothing extends them; Panels do not extend, NoteGroupFile does not
        extend either.  A NoteGroup has a myNoteGroupPanel and a dataAccessor, and a NoteGroupPanel has a myNoteGroup.
        All seven Group types load correctly, and the three Calendar types also increment and decrement correctly.
    There has been plenty of renamings as well, to properly align with the hierarchy changes.
    Every file I have open right now - shows changes; need to declutter so there will be a check-in now even though
        the rearch effort is far from over.  Definitely not yet ready to pub.  Did that, then -
    Fixed: Jump from Year or Month 'view' to a date - not changing notes.  Needed to change the group name when
       changing the date, like it has already been done in setOne Forward/Backward.
    Verified all groups saving correctly when edited via their panel.
    Check-in again.

22 Oct 2020
  After spending the last week nibbling around the edges of the rearchitect task, I have come upon the crux of it:
    Cannot have a Panel to be extending a NoteGroup, if we really want the data to be separated of the Panel.  This is
    because we want to have a base Panel that all panels extend, but now that we are having more than one NoteGroup
    type, which one of those would the base panel extend?  Cannot have multiple inheritance, so Panels will need to
    encapsulate their NoteGroup.
  So now it all had to break.  First step was to convert NoteGroupPanel from extending NoteGroup, to encapsulating one.
    And that breaks so much more...
  Best thing to come of it so far is that the load has been reworked into two separate parts (3, if you count a separate
    data accessor) - the load of the data in NoteGroup, and the call to that one from NoteGroupPanel.updateGroup.  With
    overridden setters, the NoteGroup load in the base class also 'sets' the two main data objects, for ALL data types.
    Now if I can ever get it rewired to connect back together correctly, it will be awesome.
    Working on all of it; could be a few days...

20 Oct 2020
    Moved the reverse link creation from the editor panel to Notes and Groups via a new Interface with default methods.
    Removed the constructor for LinkedEntityData that took in Properties and Notes; now those are Info types.
    Now have 3 tests in this area - one for the LinkagesEditorPanel, one for reverse Note links, and one for reverse
      group links.
    This was all done in support of stabilizing the existing functionalities before continuing to try to get data to
      be separate of Panels and Files.
    Check-in and pub point.

19 Oct 2020
    Idea to move addReverseLinks from one location in the editor panel, to two places; callable via either the link-
        holding Group or Note.  Possibly as an Interface (LinkHolder?) with a default method.
      Why?  It is in line with the effort to keep Panels separate of data, and currently in order to add reverse links
        you need to have an instance of the editor, that was constructed with the linkholder in question.  This
        became apparent while trying to develop the full test for reverse links, and it is during this test dev work
        that it is appropriate to make this move.

18 Oct 2020
    Tried adding an addNote() to NoteGroup, to get it into the Vector without giving it a type - and that works!  This
      will change things...  (for one thing, it could greatly ease test setups).
    Consolidated constructors for the LinkagesEditorPanel, so that a null may be sent as the note to link, and only one
      main constructor is needed for the panel.  This simplified code and increased coverage of code by tests.
    Moved groupChanged from NoteGroupPanel to NoteGroup.  Added a setGroupChanged() method to NoteGroup, left the one
      in the Panel but now it calls the new one in the base, as well as still adjusting menu items.

17 Oct 2020
  With the current 'real' goal being to implement auto-removal of reverse links, there is still the competing and
    disruptive effort of wanting to fix the architecture.  But upon trying to prioritize the 'real' work, I find that
    the first stop along the way is to acquire a Group from its GroupInfo that came from a link.  This SHOULD NOT
    involve constructing a Panel in order to accomplish, yet it does, given the current implementation in GroupInfo of
    getNoteGroupDataAccessor.  So if this bothers me so much that I cannnot set it aside, then we have to work on the
    rearchitecting anyway.  So that is how it is, at least partially, to the point where the method will give me a
    reference that can be used to save a NoteGroup without involving a Panel.  No telling how much of the rearch will
    be needed in order to accomplish that; will let you know.  Here is some of the thought process that led up to
    this point:
  Reasons for continuing with the full rearchitecting:
  1.  Need the ability to get a full typed NoteData from a Group.  The 'getNoteData(NoteInfo)' can be defined in
        the class children to provide the translation type for the noteGroupDataVector so that
        it can be cycled through, to search for the ID.
      But is it needed?  Seems like the latest rev of getLinkTargets is better, now (cycle thru the untyped data Vector
        as Objects, cast to base NoteData so the ID can be compared and then return its linkTargets).
      THAT IS CORRECT - not currently needed.  And if we do at some point need the full specific type NoteData then the
      same cycle mechanism could be used to return the full Object and let the calling context cast it to the class that
      is expected.  We can do that right now, without any hierarchy change needed.
        Reason #1 rejected.
  2.  Get NoteGroup data and methods separate of Panels.  This would be needed if the app ever goes more towards a
        client-server setup, such as would be the case in the Web version.  But that is an eventual; right now -
        the methods to load and save data NEED to provide a way to do that without having to create a Panel, and
        they don't.

16 Oct 2020
  Recent discoveries of problems with reverse links - not all of them came from recent changes; some problems were
    there before and just not yet tested.  Now, have manually tested more than 24 different link paths from a Todo
    Note, and fixed a few problems found along the way as well as rehabilitating tests.  For the fix where a non-kept
    group needs to be loaded, made inroads into the rearch task by adding a static method to a new CalendarNoteGroup
    class.  There will be more, but this is a good stopping point at which to commit - all reverse links are believed
    to be getting created properly (and none of them are being auto-removed, yet).
  But there is an issue with Month and Year notes, resetting the view in the main app after viewing a link.
    Fixed.  It was the setting of the AlteredDateListener in the LinkTargetSelectionPanel, taking the listener away
    from CalendarNoteGroups that were only getting it set at construction.  Now they get it (re-)set on node selection.
  Check-in and pub point.  (After fixing the cut/paste-caused problems in new code that testing caught for me!).

15 Oct 2020
  Testing the various getGroupProperties and the acquisition of LinkTargets, and the saving of the groups with
    forward or reverse links via their NoteGroupDataAccessors - the few small hierarchy changes did break
    several logical paths, but now working on tracking it all down and refactoring to fix.  Tests would be nice..
  Moved myNoteGroupPanel transient out of GroupInfo and into NoteGroup.
  Refactored all settings of Properties to use the setter in NoteGroup (or the overridden one in the Panel child).
  Removed transient GroupProperties and NoteData from links; these were making separate instances anyway.
  Changed NoteGroupFactory to ONLY deal with Panels; now does not return a NoteGroupFile as a NoteGroupDataAccessor.
    This was to ensure that the resulting reference would properly translate the GroupProperties and vector data
    into the correct types, via the overridden methods that are only in the Panel children.
  AND the above comment shows that I'm getting wrapped around the axle yet again.  The whole idea here was that I did
    NOT want to have to make a Panel, in order to properly manipulate Group data.  This is why a full re-arch IS needed,
    and my previous objection about having too many classes - you just have to accept it; we need to have a new level,
    where each note data type has its own group class, and we need to somehow deal with File accesses - either leave
    it in the chain, or encapsulate a NoteGroupDataAccessor.  Prefer the latter, but either way this takes us back to
    having a lot more work to do.  Not sure at this point whether or not there will be some intermediate stopping point
    where I can get back to having a working solution to at least create and persist the reverse links; had that,
    before trying so hard to automatically remove them.  Oh well - you got something better to do?   ... thought so.

Moved this note down here from the above ongoing issues above the log notes.
This was 'discovered' sometime in Early October; could have been before or after (up to the 15th) this placement.
    It looks like, if you use the Jackson mapper to convert an already-loaded json Object into GroupProperties
    (or NoteData), you still get a new instance, and any change you make to it is not seen back in the source data.
  I had been counting on a pass-thru, which would have worked had I just had a proper handle and one a recreated one.
  This is what led to further changes in the data makeup of a base NoteGroup, and more embedding of the Object array
    and eventually the decision to rearchitect again.

10 Oct 2020 - Started the re-arch work and also wanted to go directly to the added benefit; being able to extract a
  single note from a NoteGroup.  How to do that presented a big problem since the usage of 'AllNoteData' in searching
  was a simple 'read' operation but the intended use now would be to obtain a discretely defined reference to one of
  the primary data types.  Getting a note like that from an untyped Vector - did not immediately see how and it became
  a bit of a sticking point.  Stopped for a day but then when looking at the calling context for it (removing a reverse
  link), I saw that all that was really needed was the LinkTargets, not the actual Note.  It seems that by using the
  'AllNoteData' trick, we can skip the intermediate level of NoteData and go directly to the LinkTargets, that ALL
  data types have.  So the method was renamed from getNoteData to getLinkTargets, and implemented in NoteGroup, as
  well as moving the getGroupProperties implementation from NoteGroupFile to NoteGroup.  But since NoteGroupFile is
  a child of NoteGroup, it still qualifies as a NoteGroupDataAccessor, without having to remove the two methods from
  the interface definition.  So - it seems there was another alternative after all; a full re-arch is not needed at
  this time, but I'm sure we will want to pull NoteGroupFile out of the line at some point.  To do that, the current
  usages of NoteGroupFile (by Panels) would have to move from being inherited to being an encapsulated
  NoteGroupDataAccessor.  Not sure how long before that will be needed...

8 Oct 2020 -
  Considering yet another hierarchical shift - moving two of the NoteGroupDataAccessor methods into NoteGroup,
    (getGroupProperties, getNoteData) and having the Panels extend NoteGroup directly.  Then a NoteGroup could
    encapsulate a NoteGroupDataAccessor to be used for I/O operations, and that accessor would of course be the
    NoteGroupFile (for now).
  Pro:  No need to have a Panel in order to get a note of a specific data flavor from a group.
        Instead would need to provide a GroupInfo and a NoteInfo (components of a Link)
        This would provide a mechanism currently needed by the auto reverse link removal feature, and
        <might> get more usage in future features such as Goal evaluations.
  Con:  Been here before in a slightly different perspective - this would be the 3rd+ time around the axle.  Each time
        we re-architect, the pre-existing data gets put at risk and we seem to still have the same issues and needs
        after it settles back down.  Will this time be any better?  the last?

  The 'pro' describes a need and how to solve it; the 'con' offers no alternative solution; this is not a case of
  rearchitecting for the sake of it; there is a real problem needing to be solved, and only the 'pro' does that,
  whereas the 'con' is a change-fearer.  All the previous changes have been incremental but incomplete steps in
  this same direction; just because we haven't gotten there yet - doesn't mean we should stop now.  I acknowledge the
  frustration of seeming to refactor the same code in the same way, but each time there were some benefits even though
  not entirely straightening out all the object hierarchies.  The fear of corrupting pre-existing data is valid,
  but I accept the risk of choosing to proceed since there is no other choice but to abandon the feature.  (Abandoning
  the feature IS a valid option but that would close off not only the one planned new feature but also the future growth
  that can come from the new 'getNoteData' method, and I do believe that this will open a pathway to a more robust,
  full-featured app).  Proceeding with the changes...

7 Oct 2020 - Worked on comments for getNoteGroupDataAccessor and the call to it from the LinkagesEditorPanel.  Then
  back to reverse link removal, which led to a need for a 'getNoteData' method that currently has no easy path to
  implementation.  Thinking...

6 Oct 2020 0823 - Fixed: When Day notes changes date, Month Notes not saved.  Check-in and pub'd.  At the Calendar
  level, in the setDate method, added a conditional preClose.

5 Oct 2020
  Now that we have a NoteGroupPanel, renamed NoteGroupData to simply NoteGroup.  A NoteGroup IS its data.
  Converted the GroupProperties and NoteData of linked data, to transients.  Only needed to hand-fix three data files.
    Found those files via command-line by:  grep -r targetGroupProperties * | grep -v null
    This was needed because Windows Search via FileExplorer not working, and IJ only look in project files.
  Added methods to allow a NoteGroup construction without a Panel (or File), and then to use the GroupInfo to load
    a File to make a NoteGroupFile.  In support of the auto reverse link removal.
  Lots of commenting and comment fixing.  Check in point.

28 Sep 2020
  Resolved this issue:  May need to separate groupChanged into propertiesChanged and notesChanged - more granular
    handling of whether or not to save the group.  This came up because of linking but since then, link ops have
    needed to save the group immediately, not just set a flag.  So this issue has evaporated, not needed.
  When editing links, the source note should be highlighted.  Did that, in the popup handler.
  Resolved this issue:  Fix status messages for groups with readOnly notes when they are shown via the
    LinkTargetSelectionPanel.  Not only the status messages, but when the TMC was present, date selections were
    being handled.  Added the 'editable' constraint in NoteComponent, Events, and ToDo lists.
  Check-in point.

9/27/2020 1028
  The MonthView shows some days with no notes as 'blue' - due to having a file for the day because there is
    now a GroupProperties in the file.  But if there are no notes - do we
    keep the color change, have no color change, or use a different color?
    Fixed this - linkages only with no notes - should not get a color change.  Refactored the method in AppUtil.

9/26/2020 1106
  Now that group properties hold the group name, renaming falls short because it only deals with the filename
    and not the data inside the file.  This has caused issues when reloading the file and the group name gets
    set to the old string.  We don't want the rename op to have to reach into the file, so the fix for this is at
    group startup - at that time, reset the group name according to the one in the constructor.  This was
    implemented in four places - Todo Lists, Events, Search Results, and Goals - any group with a branch editor.
    It should also fix the two categories that support a 'Save As..' functionality.
  The 'saveWithoutData' flag was introduced back when the only criteria in deciding whether or not to save a new
    file was whether or not there were Notes in the group.  Then it expanded to include Properties and since TodoLists
    and SearchResults always had properties, they did not need the flag to be set.  Now, saving still cares about the
    presence of notes but since ALL groups now have properties, the other thing it cares about is whether or not the
    properties have links.  Since we want to preserve empty SearchResults and TodoLists, they both need to have this
    flag set (again).  But for SearchResults, turned off saving of the NoteGroup in all cases except for initial
    file creation.
  Checked in and pub'd.

9/24/2020 0330
  Moved addNote to NoteGroupFile.addDayNote.  Moved filename string methods into NoteGroupFile, mostly from AppUtil.
  Saving of Panel data now done only via their preClose(), but now that saving of File data has moved to NoteGroupFile,
    it is not appropriate to make that one private, as considered briefly in the ongoing notes.  Dropping that.
  Added GroupProperties to NoteGroupFile constructor, to fix breakage that was happening via addNote after Calendar
      types got properties.
  Fixed the problem where the 'move note to day' operation would wipe out the other notes on that day, IF that day
      was showing in the panel and had unsaved changes.
  Removed blnNoteAdded from DayNoteGroupPanel; now addNoteToDay nulls out the Day panel, causing a reload if selected.
  Add Note to day now working as desired, and this paves the way to get back to automatic removal of reverse links.
  Check-in point.
 Later that same day -
  Now saving any NoteGroup that is being considered as a link target, before the target is accepted, by calling
    refresh() on its panel if it came from a keeper.  This preserves any unsaved changes that might have been in Groups
    in keepers, and removes gaps in the display if needed.  Upon re-viewing the target group in the main app,
    the view will be in sync with the one that was shown for target selection.  This is unfortunately a back-door
    way to save any/all currently open NoteGroups, but this is preferable to losing unsaved changes that had been
    lingering in 'keepers'.
  Fixed a logic flaw in the new 'setEditable' code - now, doing a full loadInterface, if needed,
    instead of only cycling thru all the NoteComponents to change their editable flag.  This
    cures the issue where the last (empty) note on the page was missing when going from non-editable in target
    selection back to an editable Panel that is still in the keeper.

9/18/2020 1428 - The timestamps are also in support of archiving, so don't want to drop them yet.  Evaporated the SCR.
  Meanwhile, we have seen an announcement that visa holders no longer have to leave after x months; they may remain
    in Russia for the length of their visa validity.  Still need a confirmation on this, but it is a big relief,
    allowing us to shelter in place if needed, until June 2022.
  The streamlining of NoteGroupFile.saveNoteGroupData, in support of saving Panel data, is done.  But non-panel
    data, such as coming from an Add Note to Day operation - failing on load day because it has no properties,
    which should probably get set by a new load path, which is not yet written.  So will work on that next,
    and get Add Note to work again.  Searches will also need work.  Check-in point.

9/14/2020
  Briefly considered changing CalendarNoteGroup file names to their title.  But that would require a BIG data fix;
    not going to do it for that reason, and because then the files would not be sorted correctly in a
    filesystem view.  The database accessor (when written) will (should) not have the same issues.
  Same subject, slightly different issue - wrote an SCR to drop the timestamp portion of those names.

9/10/2020 1739 - Now the AppTreePanel can return any in-memory Panel that is requested.  Lots of commenting adjustments
    and continuing to pave the way for automatic reverse link removal.  The 'saveNoteGroup' method inside of
    NoteGroupPanel is back to being private and only accessed via preClose.  It may need a rename during the next
    steps, to deconflict it with a new one to be developed in NoteGroupFile.  Next steps:  Get the data from the panel,
    if one was retrieved.  Otherwise - try to load it.  Then do the removal, then save the data.  The expectation is
    that this removal will be seen / felt in any group that is initially in a keeper, but will verify.

9/08/2020 1726 - Lots of code hardening (renaming, duplicate efforts removed) as relates to the new hierarchies.
    Most significant is the ability of a Panel to collect its data (in progress and unsaved) and give it out upon
    request.  This provides one of two needed paths to acquiring NoteGroup data prior to adding to it and re-persisting.
    Check-in point.

9/03/2020 - Fixed the link titles; moved the makeLinkTitle() method to the LinkNoteComponent.  That they keep
    breaking shows that I still need better tests in this area.  May work on that, now.

9/02/2020 1606
    Problem with add new note to a day, month, or year, then do not save but switch to some other group and make a link
        to that day - yes, the new note does not show as a selection but you can still link to either the overall group
        or some other note in it.  But if you do that - the unsaved note is lost because the selected group is saved in
        order to preserve the reverse link.  This is a good case for adding CalendarNoteKeepers.  Working on that...
    I now see that there is an alternative path to the same problem - via the 'move to day' operation of Todo Notes and
        aged Events.  It just wasn't coming up enough to see it.  The new CalendarNoteKeeper needs to solve both
        problems, not just for linking.
    And now one more realization - the AppTreePanel itself is already effectively the CalendarNoteKeeper, and is doing a
        better job of it than I started to code in, so all that was really needed was an alternative signature to
        AppTreePanel's getNoteGroupFromKeeper() method.  Did that.  It keeps three separate references vs one, but
        that is an acceptable tradeoff given that there are only three and their names never change, unlike all the
        other group types.
    Fixed this by giving the LinkTargetSelectionPanel a way to access the current versions of the three Calendar note
        groups (although the 'move to day' variant of the problem still remains), and did a checkin that included the
        majority of the hierarchy refactor/rename.  But along the way, have broken the link titles and the add new
        group functionality.  Need to work on those first, then can move on to the auto-removal of reverse links when
        a forward one is removed.

9/01/2020 0914 - The new hierarchy is designed and implementation is underway:
    NoteGroup became NoteGroupPanel - all the interface work; initialize & display components, extract data from them.
    FileGroup became NoteGroupFile.  Parent class of NoteGroupPanel (like before), package-level access and now not abstract.
        The main difference:  load/save functionality split apart; previously all in NoteGroup; now -
            NoteGroupFile should do the file accesses and error handling, NoteGroupPanel will use this when either loading
            the panels or after scraping them for changes prior to a save.  Eventually there may be other options
            for data accessing other than file (database) and at that time this may become an interface
            implementation (one of 2+), with the chosen accessor being injected to panel instances via their constructors.
    NoteGroupData --> a new concrete class that is the data only.  It is the new base for NoteGroupFile.
  These changes do not (yet) solve any problems; just set us up to work on the known issues.  Doing that now...

8/31/2020 0744 - For some time now there has been a clash of NoteGroupPanel panel operations vs data operations.  A while
  back, I somewhat separated the two by having NoteGroupPanel encapsulate a JPanel rather than extend it.  But that still
  left the group data highly connected to the panel, and this is causing a problem now when we want to load and save
  group data directly, without involving a panel at all.  We want to do that because of linkages - adding and removing.
  And there is an older need for Events and Todo Lists, to move a note to a day, that was coded to load in the full
  panel-based notegroups in order to do that.  For those usages this was considered ok because the occasions were
  rare, but linkages are going to change that, so I'm considering an alteration to the NoteGroup hierarchy - split
  the data from the panel, completely.  This could get messy....  so - checkin time.

8/28/2020 0603
  Fixed the problem below by adding group-level checks, but it was needed in two places due to the way that a
    CalendarNoteGroupPanel can change its group id if the date changes.  Note-level same id checking is no longer valid
    or needed, since it cannot get past the group id check.  But the group check at point of group selection for
    other group types is better if it can be done there, because it leaves the target selection panel up and
    prevents the user from selecting their source note, so less confusing.  That they can select the source note
    on CNGs - oh well, this is still the best way thru the overall forest.
  Fixed the reverse group-group link display, by fixing the data when the reverse link is created, by splitting
    the new link creation into two branches - one with a source note and one without.  The LinkNoteComponent was
    already coded to display the data correctly; just needed to give it correct data.
  All known link and reverse link problems appear to be cleared up, and the new feature of Group linking is in place
    and functioning - will commit now before resuming testing.
  0753 Completed manual testing - all seems ok but one non-reproducible glitch of the reverse link to the To Do list
        was missing.  Individually, the two tests ran ok.  Possibly a keeper issue; will BOLO but otherwise moving on.
    Did these 12 tests - Made the link, recall/verify, restart and recall/verify.  Verified also each reverse.
    Todo Item --> Goal
    Todo Item --> Goal & Milestone
    Todo Item --> Event Group
    Todo Item --> Event Group & Event
    Todo Item --> Day Note Group
    Todo Item --> Day Note Group & Day Note
    Todo Item --> Month Note Group
    Todo Item --> Month Note Group & Month Note
    Todo Item --> Year Note Group
    Todo Item --> Year Note Group & Year Note
    Todo Item --> To Do List
    Todo Item --> To Do List & To Do Item
  0815 - Removed the 'save without data' conditional logic; if 'save' has been called then it was either done
    explicitly or because there was a change to the data or properties, and of course it should be saved; no need to
    give it a stronger push.

8/27/2020 0856
  Began the work of allowing NoteGroups to have their own links.  Added menu options to call up dialog, now working
    through all related problems.
  The problem of allowing a link to have itself as a target - is just as problematic if it links to its own group or
    any other note in its group, due to the failure during the attempt to save reverse links.  When this happens, none
    of the 'new' work is saved at all.  Pre-existing links on the note appear to remain intact, at least, but this
    still needs to be user-warned and disallowed.

8/25/2020 0657
    When multiple links are added in the same session, the most recent one has the effect of resetting all the
      previous link types to 'related'.  This is because rebuildPanel is called each time, but the linkType of
      the new ones has never been set.  This worked before; it broke when I removed the call to update the links prior
      to accepting new ones.  So, restored the call to update the links but with a new method name, no longer need to
      use a return value.
    Age events was preventing a load of one event group - made a change to AppUtil.addNote, to allow that DayNoteGroups
      now have properties.
    Commit point.  Still testing.  Not seeing reverse links to Event Groups.
  1557 - found that group properties myGroup was not being set well for older Event data files.  Gave it the same
    resolution that TodoNoteGroups have.  CalendarNoteGroups are slightly different, and need a method call to access.

8/22/2020 0851 -
  The problem:  NoteGroups pulled from keepers are editable in the LinkTargetSelectionPanel; they shouldn't be, and those that are
  constructed for use in that panel are not editable.  The proposed solution of adding a 'setEditable()' method to NoteGroups -
  is highlighting perhaps another design flaw - that NoteGroups are a collection of Swing components and the data that is in
  them, and maybe they should be two separate things - a NoteGroupPanel class that extends from JPanel, and a NoteGroupData
  class that ties together the GroupProperties and GroupDataVector, extending from a FileGroup.
    MAYBE - but the initial solution is going to be just the addition of the new method, looking for how/where to insert it
        and get it working.  If this major refactor is needed for that or would greatly help then it might also go forward
        at that time.
  One reason this came up:  Data changes do not always come from user action in an interface; sometimes the user edits an onscreen
    note but other times a reverse link might be added.  In the case of under-the-hood data alterations, it makes no sense to have
    to scrape the visible interface (unloadInterface) to collect the data back into a persistable Object.  So previously the only
    path to save was via the preClosePanel(), which did that.  Now, methods can call NoteGroupPanel.saveNoteGroup() directly, and
    the lines between the two concepts become more clear cut and more justifying of a formal separation.
  Resolution:  Did add the setEditable() to NoteGroupPanel and NoteComponent, and changed the static nature to an instance.
    There will be no major classes refactoring at this time.
    We are about to spend our first night in the cottage, so further development over the weekend is off.
    But otherwise - ready to work on the issues around adding multiple links in the same session, and fixing the
    linkTitles of CalendarNoteGroups when there are multiple ones in the UI.  Then can go back to (manual) testing.

8/21/2020 0634 - Much consideration given to dropping keepers (see 'keepers' file in help folder) but the
  pros of keeping them seem to far outweigh the problems seen here, and the problems seen here are not
  problems with the keepers, but with the design of the solution that didn't take them into consideration
  in the first place.  The proposed fix of adding a 'setEditable' method to a group is therefore not a 'patch';
  it is what we should have had for some time now, ever since the idea to have a Group be editable or not
  editable was first introduced.  Committed at this point, prior to starting on the new approach.

8/20/2020 1140 -
  Need to disallow a link to itself.  Besides the obvious logical reason for not wanting this, there are
    Exceptions thrown because the reverse link is also to itself, and that causes Vector concurrency issues.
    Added a test to compare IDs, disallow with an error dialog if they match.
  Showing a group from the keeper as a selection target, removes it from the AppTreePanel tree rightPane.
    Fixed this by adding a group reselect block to the context menu handler if the op was link editing.
    This applies to all groups that can call up the editor because there is no way of knowing whether or
    not the same group was 'viewed' in the link selection panel (although that wouldn't matter for a
    CalendarNoteGroupPanel, but the applying the same fix to them does no harm, so allowing it for now).
  1652 - Now yet more fallout from using 'kept' groups - since we don't construct them, they are still
    editable when showing in the targetSelectionPanel.  Now considering - get rid of keepers, or continue
    patching up holes caused by using them?  If we patch this one, thinking of having a method that will
    sweep through the panel and shut everything down.  But it would need to be restored when linking is done.

8/19/2020 0849
  Found a problem that reverse links to groups with keepers, where that group had been viewed, were not being created.
    The issue was that the linker was using a new group and not the one in the keeper.  To fix, had to add a method to
    AppTreePanel to allow retrieval of groups from the keepers.  Using that method (try keeper first), problem fixed,
    and this solved a different issue where the newest (unsaved) notes were not selectable link targets.  Now they are.
  Fixed:  The 'save' that occurs at link OK does not adjust the menu items.  This was because of the setNoteChanged()
    call that was coming regardless of which context menu item was selected.  There are a couple of them (this one
    included) that should not say that the note was changed afterwards (since in this case part of the action is to
    save the group).
  1551 - Fixed:  New link on an event seems ok but bring back dialog - empty.  The problem was in the EventNoteData
    copy constructor - it called super() with no param.


8/18/2020 0815
    Fixed: A new Group goes ok to the app tree, but does not show up for LinkTargetSelections, in the current session.
      Now at the end of adding a new group (in AppTreePanel), make a call to updateTreeState(true).
    Added a new functional Test class - LinkagesEditorPanelTest.  Tests the two main panel constructors and most of
      the editor panel functionality.  Will add to this as needed, if/when operational activities turn up problems
      that testing could have avoided.  Committed, at this point.
    Gave a different component visualization for a reverse link - background color orange.

8/16/2020 - Only a small bit of manual testing, and problems are turning up in random places.  Already fixed some
    related to new group creations, where 'myNoteGroup.myProperties' could still get to be null.  This seems like a
    very good time to add some automated tests related to links.  Working on that now...

8/15/2020 1143
    Link type - set once, then cannot be changed upon reload.  Did this with a new transient boolean - 'retypeMe',
        set to true at construction but changed to false when filtering existing links.
    Fixed the problem where <reverse links were being saved as soon as a new link was created, but the forward links
        might not be saved at all, if the user does a 'cancel' on the link editor, or afterwards does an 'Undo All'>.
        Did this by moving the reverse link creation to the place where ALL the editor dialog work is accepted, AND
        went ahead and saved the link holder group at that time (this is new behavior, and obviates the user's
        ability to undo so it's not great but we will live with it for now).  Then, cycle through all the editor links
        (to check on and if needed, create reversals).  New method in addition to 'addReverseLink' is now
        'addReverseLinks'; this is the one that does the cycling, then calls the original method one at a time.

8/14/2020 1940 - As soon as the new reverse link (a true reverse) was 'fixed' and tested, a new problem came up - the
    reverse links are being saved before the source link, and the source link might not get saved at all, if the
    changes to the group are undone.  This has led to some new design decisions - upon clicking the OK to accept a
    new link, the group with its new link will be saved at that moment, and THEN the reverse links will be created.
    But what about the ability to UNDO, you ask?  This will have to be an acceptable situation for now, just like
    when on a calendar note and the viewed date is altered; those groups are also saved and the user's ability to
    undo is taken away.  It raises the priority for a better UNDO solution and I have ideas for that, but for now we
    press on with the situation as described.  Right now - need to work on the mechanism for showing previously
    created links with immutable link types, alongside new ones where the link type is still malleable.

8/13/2020 0636 - The new plan is that I have to go back to having a reverse link be a full and true reverse of the
    forward version.  This means that in order to have it 'know' it is a reverse link, a new boolean member is needed;
    cannot just add another link type because that variable will already be in use, holding the reversed type of the
    forward link.  The decision had already been taken that links cannot be changed after the first definition, but
    the type had been left malleable and that was a problem for the immutable reverse link.  Now, the link type must
    also remain unchangeable but now that forward link creation is delayed until the 'OK' button, the user will first
    set a different type (if appropriate), so when the reverse link is subsequently created, it can properly reverse
    the type as well.  This just leaves the possiblity that they got it wrong, in which case they can recall the
    dialog and delete the link, then make it again.  And that leads to one other possible problem - we were not
    going to try to keep the two links in sync after their initial creation, but what if one or the other is
    subsequently deleted?  The decision here is that if a reverse link is deleted, do nothing else.  But if a forward
    link is deleted, we will try to find the reverse link, and delete it if found.

8/12/2020 0705 - Getting back into it.  Printer ink (3 cartridges so far) is replaced, residency paperwork is
    reviewed and groomed, and some additional copies made.  As ready as I will be, for a meeting with our
    contact sometime after the 17th (thinking about the 18th, at this point).  But unless something else
    breaks thru either then or before, we will have to plan on leaving Russia before 9/15.
  0824 Fixed:  A test is making a 2019 directory with a december daynote, at the top level - stop that.
    It was the DayNoteComponentTest, an overridden 'get group filename' in the test setup.  Removed the override.
  1130 - Ensured that all GroupProperties have a 'myNoteGroup'.  Now upon group load,
        set the value in its properties at that time.  Then set it to 'this' upon group construction
        as soon as the Properties themselves are made.
  1140 - Now that I have preserved a 'reverse' link, I can see the flaw; there is no way to see what it is
        reversed 'from'; it just looks like a link to itself, so it 'knows' it is a reverse link, but it
        has no info to show the other end, and more than one reverse link would all appear to be the same.
        Need a new plan...

8/07/2020 1704
    Ran full tests - fixed issues, checked coverage  (90% classes, 69% lines)
    Fixed: When a Day Note item is selected but then the day changes, the LinkTargetSelection panel header does not
        drop the selected note, AND - if a new day is accepted the linkagesEditorPanel shows nothing in the note area.
        For this, added a new Interface (AlteredDateListener) and made it listen for the AlterButtons.  Changed the
        current handling in AppTreePanel to use this interface, making the CalendarNoteGroupPanel more generic.  AppTree
        Panel still reacts by setting viewed and selected dates as desired, but now LinkTargetSelectionPanel also
        implements the interface and will deselect any currently selected note, allowing the user to choose a new
        one, or not.
    Fixed a long-standing problem that selection does not go away when a group changes on the AppTreePanel.  Now,
        focus is transferred to the menubar when a new choice is made.
    Problem:  The selection highlight does not go away when a CalendarNoteGroupPanel changes due to an AlterButton click.
        Only goes away if that led to a non-existent group/file.  Highlight can stay on the same line, unless
        there are fewer lines, in which case it moves to the first note.  This is a problem for both
        the AppTreePanel and the LinkTargetSelectionPanel.  If you then want to actually select  the highlighted
        line, you need to select some other one first, then you can get to the one that appeared to be active.
        Fixed this in the three CalendarNoteGroups, by having the mouseClick pull focus to the source component.
        In this case, the clickable LabelButtons do not have an 'active' outline because they are Labels, not Buttons,
        and they are defaulted to not focusable but that apparently does not stop them from being able to ask for it,
        and getting it when they do, or at least getting it away from the NoteComponents.
    Fixed - Color and tooltip of a link target note with extended note, in the LinkagesEditorPanel.  Extended note
        was there but not being visualized properly.  Now there is a new call to resetComponent as soon as the
        LinkNoteComponent is instantiated, to resolve.

8/06/2020 0810
  All GroupProperty groups are being named correctly, including the CalendarNote types.
  Fixed all link selection reporting as it proceeds from none-->category-->group-->note, in the
      LinkTargetSelectionPanel, as well as the final representation in the LinkagesEditorPanel.
  The work since the July restart sent me back to 'the drawing board' for link class makeup, creation process and
    representation, as well as many related issues, some of which are now resolved or at least 'designed'.  I thought
    I was going to roar ahead with Goals but after Milestones coalesced into the way to proceed, the representation
    of links to the Goal became even more important yet I had no way to show them, so that is when the concept of
    the reverse link came into being.  But adding a linkTargets vector to NoteGroups reintroduced the infinite
    recursion problem and the original solution to that was already klunky enough; now that it appeared on another
    class that had previously persisted without issue, it called for a better design and so some new intermediate
    classes were introduced, that were more appropriately modeled to persist link data.  This 'reset' took
    precedence over Goals and ultimately required going back to the Link panels to deal with the class changes as well
    as some doing much-needed refactoring and usability improvements.  So this is a new stable point before going
    ahead with the reverse links, and that makes it a good time to commit/pub - doing that now.
  Next:  Create and persist reverse links.  Saving Groups without data can come after that, since a reverse
      link is the only way that would happen (not really without data, just without its own notes, but it would have
      linkTargets (reverse links) in its properties, so would need saving).

8/02/2020 1854
  Needed to make several data-loading adjustments for those classes that previously had no Properties, to allow
    for older data.  Also added @JsonIgnore tags to two older link members, so that the older link data will not
    cause continued problems.  However, those same members are now being used transiently, so that isn't great
    that we have to @JsonIgnore them vs having them be private transient.
  Changed link creation to work on a copy of the containing entity until either the OK button accepts all changes,
    or they are thrown away by the CANCEL.  This resolves all previously noted 'cancel' issues.
  More thoughts on the reverse links - now, will save the SAME link in both places.  See the linking.txt for the
    full reasoning, how they will be managed and displayed.
  Next: Clear up GroupProperties issues for CalendarNoteGroups, and group saving without data (if there are links).

7/31/2020 1441
  Need for a GroupProperties to be able to reference the group that it is in.  For this, moved the
      placement from a FileGroup to a NoteGroupPanel.  This had a big ripple effect and in the process, removed all child
      notegroup declarations of properties.  Now only one, defined in the base, and those that need more property members
      will provide a 'makeProperties' method, where usage of the getProperties() object will require a cast.
  Reintroduced recursion with the reverse links, due to 'linkTargets'.  To resolve, made new intermediate classes
      GroupInfo and NoteInfo, that hold all 'base' data except those vectors.  Now, links are defined with the
      intermediate classes, and only the true data classes have the list of them; recursion eliminated but this
      does invalidate all links currently in prod (which is no biggie since it is still a work in progress feature).
  Reverse links now being created for Events, Todo Lists, and Goals.  Calendar types are more
      problematic because they do not save without data and previously had no properties.  Working on that now...

7/25/2020 0725 - Lots of 'design' thinking:
    GoalGroupPanel layout redesigned;  Title, Plan Statement, Statuses, Milestones.  And the milestones (just TodoItems,
        at this point) are saved and retrieved.
    With Goal data now being the new Milestone class, now need a new place to store the links to the overall Goal as
      opposed to any one milestone.  Decided
      to add a 'linkTargets' vector to GroupProperties, so solve this.  This list will be editable via the same
      interface used for individual NoteComponents, but to be invoked from the main menu and since the data is on
      the base class, this could be used for links to/from ANY group type, not only Goals.
    Solved the problem of displaying 'reverse' links - new links will be created twice; once on the
      source and once on the target.  Then when Editing, the list will be complete and the entity under examination
      will be the source for all the links shown.  Implementation to follow; this was just the concept.

7/21/2020 - Took a 'break' to fix some hi-pri problems:
  A pasted note can wipe out the file for that group (!!! seen in PROD on monthnotes, for Jun 2020).
     This turned up a problem when crossing data types.  It worked, but saved data that could not be loaded due to
     the cast that is done by the Jackson json interpreter.  Added logic to the paste section, to drop any child
     data class attributes if the paste is being done to a different class component.
  Once a TodoItem is linked to a 'Note', the group for that note type (Day, Month, etc - loses its heading title.
     This is because the constructor ran twice but the title label is static and was reused.  This was an easy fix,
     in three Notes group types (day/month/year).

7/20/2020 0712 - Now have a complete idea of how to show / work with a Goal, and it is VERY close to a To Do List.
  A Goal will be a collection of Milestones, just as a To Do List is a collection of To Do Items.  Link capability
  is already built in to the base classes; just need to expand handling for Milestones.  Now working on adding
  the main note panel.

7/19/2020 1127 - The problem with my original thinking on Goals is that I cared more about how they should look and
  getting other note types linked to them, and not enough about what a Goal actually is, and how to model it.  Now
  I'm onto the latter track, and of course a portion of what I thought before is going out the window.  Now -
  A goal needs to be a collection of Milestones, and those will be link-to-able.  It can also have a short description
  of how you intend to achieve the remaining milestones, and a boolean to flag whether or not to show previously
  completed milestones.  As for showing linkages, which is what I WAS going to show in the Goal group - now I'm
  thinking of a menu item (similar to the Consolidated View) where all linkages to a group (ANY group - Goal, ToDo list, etc)
  can be seen (seeing them at the item level for other Notes is already possible).  So now - need to fully develop
  a Milestone as a new note type and make it linkable (bidirectionally) but first of all - model the Milestone before
  doing that (noting that the lesson was learned).

7/18/2020 0532 - Upon some tentative steps back into Goals, began rethinking (again) how they should be represented.
  Now, considering adding 'milestones' as a discrete class, and modeling a Goal as a collection of them.  This way
  they can be retained after accomplishment and shown or not, to help with Goal Evolution.  This could change the
  entire UI, again - making the 'plan' text less important but making a more solid and trackable 'Plan'.  However,
  this could greatly complicate things if linking is allowed to go down to this lower level on a Goal.  Need to think
  this out the rest of the way and see if it still smells good.

7/15/2020 0739 - Fixed the problem referenced below, then went ahead and moved the Consolidated View out of the tree
  and instead onto the main menu as 'Show Scheduled Events'.  This will help with Goals linking by removing the CV
  from the app tree, which would have been an invalid choice.  Did a pub of recent work.  Next up: back to Goal
  presentation & load/save.

7/13/2020 0757 - The Flashcards app is done to the point of reliable usability; now returning to this project.  Some
  problems that have been noticed are first up, before continuing with Goal work.  A cleared line can come back, if
  if is the only/last note in the group.  Will work on that.

4/09/2020 0720 - Ok, the GoalPanel makeup and display is taking shape, well enough to publish it in its incomplete
  current form, which now has Plan instructions, capability to show a longer title (but no way to set one), and a
  couple of status dropdowns (but no setting there either).  Have now decided that the Goal will hold a list after
  all, the list of source notes that link to it.  Not yet sure if this calls for a new class, or just use the same
  LinkedEntityData but null out the linkTargets.  But I keep getting distracted by the desire to start on the Russian
  flashcards project; I can see that this project could just keep on going indefinitely, unless I just put it on hold
  until I get this distraction dealt with.  So - it goes on hold, today.

4/08/2020 0834 - Just a short way along the path for showing a Goal, I can see that the single-direction links that
  I spent so much time on - is just half the answer; we need links going in both directions, if we are to have
  anything to show for a Goal.  Otherwise we would have to do a (file-based? unacceptable!) search thru all existing
  links and find all the ones that point to the displayed Goal.  This means two lists on NoteData and at least one
  new one on NoteGroups (Lists of LinksFrom / LinksTo ?).
  This will result in more class and variable renamings but of even greater concern - selection of a Group or a Note
  during link creation - needs to cause a 'save' of the associated target NoteGroupPanel, to preserve its side of the link.
 0857 - There are 'scoping' considerations - a solution could be limited to only doing this for Goals (for now?),
  which makes sense since we have no way to show bidirectional links on NoteData or any way to set or show links at
  all on the other NoteGroupPanel types.  Will be working on this..

4/07/2020 0928 - Creation, display, storage and retrieval of links in all four categories - is done.  Doing a
  commit and a new pub, before going back to work on Goal panel L&F.

4/06/2020 1026 - Finished the work on the dialogs for low/no data, then committed all work to this point, which is
  that linking is now usable for Todo Lists and Events, and the dialogs and classes are hardened.  Events fix
  themselves automatically because there is no pre-existing data, so the loaded data just adjusts accordingly
  and is saved back out correctly.  For todo lists, they needed to be re-saved one time before they could be used
  in a link; ok otherwise.  The app opts needed a hand-edit to remove the original linkages solution but otherwise
  the new code was immediately usable, so I did a pub.

4/04/2020 0417 - At last note I still only had a partial solution; since then the GroupInfo class has evolved into
  GroupProperties, which is the basis for properties for all NoteGroups.  This class can be the type of a new member
  of a LinkedEntityData, and that solves the rest of the issues with establishing, saving, and loading the links.
  Only working so far for Todo lists; there is a lot of work needed now to finish this part of the work, and to
  harden the result.  After Events, still need the Goal presentation, and linking to Dates.  This will continue
  for quite some time.  Meanwhile in the real world - we are in coronavirus quarantine (social distancing; we
  don't ourselves have any symptoms, haven't been exposed as far as we know), since the 2nd officially
  and voluntarily for about a week before that.  And it goes until at least the 30th.  Regaining some weight.
 1516 Working on events, saw that the current solution would automatically give  Properties to Dates and that would
  cause problems with storage and retrieval since they don't already have properties, like Todo groups did.  But
  Dates may not need properties anyway, so overrode the 'makeProperties' to set the default back to a null.  For
  events, which also do not already have that data element in their files - will do a manual data fix to add them,
  since there are not that many of them, and they are all in one place.  Dates will still need attention but now
  it can wait until Events are done to the same point that Todo lists are.
 1542 Loading and saving of Events, with or without properties - is ok now.  Properties are added automatically.
  And it appears that that was all that was additionally needed, to get Links working for Events.

3/31/2020 0615 - Suspended work over the last few days, instead working on a better organization of my video
  collection files.  Now back to it, and what's been immobilizing me is the idea that I don't really like the
  way that all linkages are kept in AppOptions.  My original intent of putting them onto the individual notes -
  keeps popping up and getting shot down due to infinite class recursion.  But the classes keep mutating as I
  try to shoehorn in the Link concept, and now I want to try again.  Now that a LinkedNoteData has a Vector of
  LinkedEntityData and that one does NOT extend NoteData but instead encapsulates it, it may be possible. So the
  right answer would be to just absorb the two new data members of LinkedNoteData into NoteData.  Trying...
 0755 - yes, this can work, after testing in area51.  But there is a possible pitfall that recursion could be
  reintroduced by a chain of links, so the linkTargets list is set to null when a note is used in a new link.

3/26/2020 0459 - Big problem with the DataFix - the AllNoteData load does not allow for specific
  re-saving; we get AllNoteData vectors - blam!  Cannot use the new search code as the driver for a DataFix.
  Solution seems to be to reinstate the specific DataVector classes, for DataFixes only.  This is one of
  the aforementioned steps backward.  Of course - have not yet done the pub.
 0745 - ok, DataFix remediated, and test data also fixed.  All seems ok; proceeding with the pub.  No longer need
  a 'FixUtil' specific to DataFixes, but DO need all the NoteDataVector classes.  The new DataFix needs to be the
  new starting template for future data fixes, as opposed to the search functionality in AppTreePanel.  But of
  course it can be consulted, if there has been any evolution there.  Moved the 'save' code, to coreside with the
  loading code which had already moved to FileGroup.  And although the datafix has put into place the GroupNames,
  it seems like I may still go with just adding a Properties member to ALL notegroup files, and then wouldn't
  have a separate file of GroupProperties.  Still ruminating on this one.

3/25/2020 1656 - The linkages work drags on.  I am getting only a few lines of code per day, if any; sometimes there
  are steps backwards.  But it does
  appear to be coming together, nonetheless.  Now I can see that the new work is restricted to a single menu item
  on the NoteComponent, and it may be helpful to commit and publish up to the current dev point, even though it is
  not ready to use.  After all, there are / have been other placeholders in the code before now, and I keep getting
  tripped up by having a 'linkages' member on a NoteData, that really should come out with the DataFix.  So - I will
  do it.   More new developments since last time:
    Dropped LinkData, in favor of two new classes.  Source entity now becomes LinkedNoteData, that can contain
        a list of linkages of LinkTargets.  Now the AppOptions holds a list of LinkedNoteData.  Major refactor.
        Went back to the idea that a NoteGroupPanel cannot be a source of a link; only a target.  If you really want
        a group-to-group link, the equivalent effect can be achieved with a new note that effectively 'wraps' a group.
    Added a somewhat complex 'Info' panel to the LinkTargetSelectionPanel, to handle the manipulations of the
        expandable tree nodes, give user instructions, and show an opening screen and a way to get back to it without
        starting over.
    A NoteData does not exist outside of a NoteGroupPanel, even though it has so far not needed to know about its location.
        But now it often does need to know/report this, and now that a NoteGroupPanel reference can be reduced to a single ID,
        it seems time to add that value as a new LinkedNoteData member.  Of course it could remain null in the right
        situations.  But will also need to add move/copy handling - could get messy.

3/16/2020 0846 - Link selection, definition, & display has been brutal - tremendous effort over the last several
  days, in the creation of two dialog panels and all the data support needed for them, too much to cover, and
  still underway but has pretty much taken a near-final shape.  So some significant developments:
    Began seeing too much clutter at the top level of a user's data directory, so moved all year-folders into
        a new containing folder, 'Years'.  Similar now to all other NoteGroupPanel types.  Next 'pub' will have
        to account for that, plus the many lower-level data changes needing a DataFix.  The DataFix will also
        create a new list embedded in AppOptions, to match group names with their new IDs.
    Added Link Type to the LinkagesEditorPanel.
    Fixed long-running problem of arrow key scrolling increment size in a JScrollPane (from the noteString)
    Added NoteData selection capability to NoteGroups via NoteComponent textfield focus events and a new
        interface - NoteComponentManager.

3/11/2020 1200 - Recently added the GroupProperties class, and now have completed the L&F for the
  LinkagesEditorPanel, and it calls up the LinkTargetSelectionPanel, that still needs work.  Dr. appt
  for skin allergy followup, today at 4pm.

3/07/2020 1312 - While working on the new LinkNoteComponent, found that the target Group name
  is needed, and it is not present in the new design for LinkData.  But putting it there would
  mean a lot of improper data duplication, and complicate matters when a group name changes.  So -
  decided that a new support list is needed - a GroupNames list, which mates the IDs with the Names.
  Working on adding that in, now.  Decided to quick-start it, with a DataFix, and now is a good time
  to follow through with all the @JsonIgnore removals.

3/3/2020 0656 - Done with reworking LinkData (again, for the nth time) - now it inherits from
  a new class - BaseData, as does NoteData.  It now appears that this will not break the load
  of Goal data, because the load will only be for AppOpts (which contains a 'linkages' list)
  and the Vector that a Goal needs to show will have to be developed from that, every time it
  is shown.  Otherwise, most of the NoteGroupPanel methods that it has inherited can be used as-is.

2/29/2020 0850 - Due to the realization that LinkData needs to go both ways, the location(s) of
  where to access it need to change to a more centralized repo, vs all the individual NoteDatas.
  Now removing 'linkages' from NoteData, and will instead keep a single Vector of them, at the
  App level.  This will allow easier future growth in terms of showing the links that a NoteData
  has, in either direction.  It also provides for complete updates when changes are made on
  either side of the link (one-stop shopping).  But a downside is that the LinkData now
  needs both a source and a target, both parent group ID and item ID, and that means it has much
  less in common with a NoteData and so should not extend it.  But does that break the handling
  during load/unload interface, or group loads/saves?  If so, may be able to fix that with an
  additional Interface.  Considering..

2/27/2020 1511 - Stability restored, class hierarchy revised a good deal.  Added BaseData, that
  NoteData now extends, and so does GoalGroupProperties.  Added another UUID to LinkData, so the
  connection can be two-way, used in the 'reverse' direction currently (planned) only by GoalGroupPanel
  but possibly by others in future mods.  LinkData extends NoteData by overloading and ignoring
  the linkages list so that it remains serializable.  Overall Goal design continues to evolve.
  Still need to add a GoalNoteComponent.
  Currently in design mode for that component; how / what to show from a link.

2/26 - Dermatology appointment at 16:30 (and blood draw next morning, ~0800)

2/25/2020 0458 - DataVector is now gone, entirely.  The ancestor of NoteGroupPanel is FileGroup, and
  that one deals only with the file name and load/save of Object arrays.  Type conversions of data
  vectors have moved back into the individual NoteGroupPanel child classes.  This paves the way for
  the stability needed to get back to adding a new class:  GoalNoteComponent.  Some of the
  earlier ideas as listed below - just didn't work out; the status as stated here is how it is.

2/24/2020 0714 - Aside from the fact that I've been able to shoehorn it in to a NoteGroupPanel, the
  only place that the DataVector class is really needed is in the Search.  If an alternative
  solution can be found there then DataVector and its children could all go away.  Didn't yet
  get started on #1 below, and #2 is still in progress with this new thought in mind.  On #3 -
  went ahead and made a FileGroup, to handle only file / name operations, and static
  loading/saving of the Object arrays, moved there from AppUtil.

2/23/2020 1706 - Continuing the work on Goals and having started the implmentation without having
  the design fully fleshed out, set some next steps to accomplish before continuing coding:
    1.  Describe the Vector for a Goal (in GoalGroupDesign.txt), plan out how to load one Vector
            element into a GoalNoteComponent with individual status, possibly an icon, a dropdown
            menu, etc.
    2.  Determine the separation / usage of a DataVector vs a Vector<NoteData>.  The mix
            of the two within the app is confusing.  Lay out each usage and determine if there is a point of
            commonality and get them combined or eliminate one, OR make the separation more obvious.
    3.  Change to DataGroup - move the vector into it, or rename to just FileGroup - depends on outcome of #2, above.
  And while those are still ongoing, need to comment on how the merge/combine option for #2 above was
    possible to a point but not enough to fully eliminate either one.  Now a Vector<NoteData> may be
    obtained from a DataVector, and used (after casting) in the NoteGroupPanel.  However, since a Vector does
    not inherit from a DataVector and vice-versa, the two classes remain similar but separate.
  Now looking into make DataVector into an interface...

2/19/2020 0747 - Finished getting the JPanel out of the NoteGroupPanel hierarchy,
  and making it a child of the new FileGroup, that currently only handles
  filenames and paths.  Meanwhile the Goal design has continued to evolve, and
  the GoalGroupPanel can become a new type of NoteGroupPanel.  GoalGroupPanel design now looks
  a lot like a predetermined SearchResult but that's ok, I think.  Goals may
  need to come off of the SearchPanel, since the idea is to just put linked notes
  directly into the GoalGroupPanel.  More on that in terms of keeping them updated-
  later.  Tests all repaired but coverage went down some, what with some new
  classes - 98% classes, 75% lines.  Now - will check in code to preserve all
  the structural changes and keep them separate of upcoming Goal development.

2/16/2020 0756 - The new TreeLeaf class was too much like the NoteGroupPanel; just a separation of
  some of the powers, while not well supporting the need to separate data from representation
  that I am still trying to do with Goals.  So serialization had serious issues, and TreeLeaf
  needed to come back out, at least in its original form and it also didn't work well as an
  interface, although some interface may be the answer to how to have NoteGroups mixed in with
  other Leaf types.  Resolving this first, before getting back to Goal serialization.
 1137 - One of the biggest problems with getting representation separated of a NoteGroupPanel, is that
  NoteGroupPanel extends JPanel.  It shouldn't.  If it didn't then it could instead extend from my own
  class(es), that deal with data and not panels.

2/15/2020 0821 - Well the first attempt did NOT work well; a Linkage cannot extend a NoteData,
  at least not while NoteData now includes a linkages list, and I'm still hoping to keep that.
  Goal data definition continues to harden / evolve, and the .txt files on design are keeping
  in sync.  But one significant evolving issue is the separation of data from panel, in a
  NoteGroupPanel, with Goal being the first to go there but this may reflect back through ALL of
  them, just like it did when TreeLeaf was recently inserted into the root of that same hierarchy.
  Now I envision a NoteGroupPenel being constructed with a Group instance that is effectively its
  data only, and the class for that data being constructed with the filename.  Still working this
  out while not yet knowing how to handle the list of linkages in terms of load/save/display and
  reorder, given that they cannot directly inherit from NoteData.  The intermediate NoteComponent
  class may be the answer, if the one for a Goal can be constructed from a Link.  Working on it.

2/12/2020 0808 - Data fix was written, and works.  So while keeping that one (hidden), went
  ahead and removed the earlier four and the archived 'export' folder.  Also moved all the
  CalendarNoteGroupPanel type data into its own folder (Years), similar to data for other NoteGroups.
  Next up:  populate a 'linkages' list with at least one linkage, and verify that it will
  save and reload properly.  Then - on with Goals.

2/11/2020 1427 - In order to make Goals be of any use, NoteData linkages are needed NOW.  Began
  implementing and found that it had a placeholder in TodoNoteData - that is too low; it's
  needed in NoteData.  Then began looking for DataFix, for this and the other NoteData items
  that had been json-ignored but not yet removed, and couldn't find it!  Turns out all the
  DataFix directories ARE there, but marked in IJ as excluded, so I just wasn't seeing them.
  This is only worth noting because it will probably happen again, after I've written the new
  one and then 'put it away'.  But also thinking now that the older is already in two previous
  archive snapshots; they could be removed, now, and just keep the latest one or two.

2/08/2020 0737 - Have started.  But after comparing the results of the version tracking, can
  see that there is not enough difference between v0.3 and v0.4 to justify the currently
  ongoing v0.4 to be a 'final', so no version switchover yet - it will need to be a BIG
  change, for that - such as note linkages, or Goals, the current effort.
 0854 - Most documentation under Help is now in need of major updating, but I want to now
  add some design notes for Goals.  Going forward, (final) design docs should discuss first the
  panel content, then all the available controls and their behaviors.  This should help
  with the eventual testing of functionalities.  Use .txt files while in design mode,
  then can move on to .docs with screenshots, when final.  Powerpoint should be for capturing
  screenshots and older designs (for review), versioning, etc - not as a deliverable doc.
 1448 - It seems that a data element that had been in the design from the beginning was removed
  back on 1/12/2014, when the NoteData was broken out of NoteComponent and put into its own
  class file.  In that move, we lost strNoteId, which was intended to be used in linking
  different NoteData items to each other.  This could have been prompted by IntelliJ, which
  cares not about placeholders for future dev but will complain about unused variables.
  Thanks IJ.  I've been taking its advice at every turn and that is probably what happened.
  Now, the IDs are needed again, to support linkages not just between todo items, but
  from any NoteData to a Goal.

2/06/2020 0820 - Finished organizing all the earlier snapshots and versioning notes (in Help),
  and now will preserve the work to this point as a final v0.4, before starting the changes that
  will support the Goals work.

2/05/2020 0938 - Still not fully 'on', but have been thinking a bit more deeply about AI and how
  I want to proceed there.  Finally arrived at a decision to document (but not develop) a way
  forward, there, while at the same time continuing to improve Memory Bank, now with a clearer
  purpose - that the MB program will be a major resource of the new AI program, whose purpose will
  be to assist the user in achieving their goals.  Meanwhile I have achieved 100% class coverage
  for testing and 75% on lines, and plan to slow down now on test dev and get back to feature
  work.  New or modified features should be clearly in support of goal identification, tracking,
  and achievement, but should not ever lose the backward-looking capabilities that support the
  ability to answer the question of 'what happened when'.  Memory Bank is more appropriate to
  that part, while the todo lists and goals belong in the newer area.  It is possible that the
  MB program could be split into separate parts.

1/24/2020 0642 - Did stick with test dev only, but adding to the RecurrencePanel tests, during
  setup found an endless loop problem that had been there all along, undiscovered.  Although
  it shows that the panel is highly underused, still needed fixing but didn't get to it until
  after Italy, and now that I'm back, finding it hard to get going aggressively again right away.
  So - did a pub of the recent works and will just continue with test devs, for now.  At this
  point the coverage is 90% classes, 69% lines.

1/06/2020 0851 - The work mentioned below is done and seems to be ok but will wait a while before
  doing a pub, because it also turned up problems (now fixed) with menu items after making a new
  list, and list changes in general.  Then the fix there was also just as traumatic.  So what
  next depends on how much is going on before Italy; safest would be to stick with test dev only.
  Coverage is now 89% classes, 66% lines.

1/02/2020 0627 - When the test dev moved on to NotePager, began finding several problems with
  NoteGroupPanel growth, page rollovers, etc.  It tracks back mostly to the refactor that was done
  on loadInterface, but ties in to unloadInterface, initialize, noteActivated, and getNoteData -
  all together.  Now considering a major rev where the noteGroupDataVector is NOT affected by
  loadInterface, and data presence and NoteComponent visibility/editability is more straighforward.
  But this is a big deal; it could all blow up and I've currently got a raging head cold and
  an upcoming visa-rejuvenating trip to Italy, along with apartment/cottage issues.  Been sitting
  on this without making a move until it seemed more clear and the head cold cleared up a bit - now,
  moving forward with it but the good thing is that a ~good git commit was done just prior, so
  I should be able to get back to this point, such as it is, if I feel the need.

12/23/2019 0843 - Decision from before was to cool it for a while (possibly till after the Italy
  trip), but couldn't just go cold-turkey after all; started working on the tests, to improve the
  worst of the coverages.  Big / good progress on classes like RecurrencePanel and DndLayout, two
  of the more difficult classes to test.  DndLayout now at 100%; overall is 89% classes, 63% lines.

12/16/2019 2002 - Just wrapped up dev for the YearView new controls operations; continual year
  update in either direction, user-entered year value, arrow keys enabled, graphic arrows shown.
  Now - may take some time off from dev work.  Or not.  Don't know.

12/11/2019 1221 - Just finished some test dev and rework for an old SCR that was just now fixed,
  related to Viewed dates vs Selected dates, and their management during panel changes from the
  tree or menu.  Test interaction between classes (shouldn't be happening in the first place !!#)
  may have been cleared up for good, finally, by turning off some of the Threading that goes on
  in AppTreePanel (at least turning it off during testing).

12/05/2019 0713 - Now have gotten past all the recent new dev work on Branch Editing, and
  really like the new looks there, and some new tests were added but more still needed.  Making
  this note now because it feels like a new round is about to start and I wanted a clear date
  to consider between the v0.3 and new from this date on v0.4 in-progress work.

11/30/2019 0454 - Last several days working on a horrendous problem that arose just as I was
  implementing merge, save, and undo; too many changes to pin down what went wrong where, but
  the symptom was that after a save, the app would freeze completely, no stacktrace.  Traced
  it down to a simple NoteTextField clear, but still never saw why, exactly, but came to
  understand that it was thread-deadlocking in a DocumentListener method on the field, so moved
  the clear() actions into a method inside the component where first the listener was removed
  and then the clearing is done, then listener restored.  This seems to have cured the lock-up
  and now menu items are enabled/disabled as needed.  Still need this menu management solution
  for Notes - Day, Month, Year, but the basic functionality seems sound.  Would really like to
  add more tests in all the areas that had trouble - swap, save, undo, clear.

11/24/2019 0656 - What started as a small issue with a lingering tooltip has blown up into a
  major change to the ExtendedNoteComponent, making its editor into a JOptionPane with a set
  size vs user-settable, which means that extendedNoteWidth/Height are now no longer needed
  or used.  That will affect every single NoteGroupPanel data element that we keep.  Probably have
  to Json-ignore them.  And a great side-effect that solves a problem that I hadn't yet
  articulated: pressing Enter will bring up the extended note, and now, pressing it again
  will DISMISS it!  This makes a quick review a LOT less painful than having to move the
  mouse to that tiny X in the upper right corner after you have pressed Enter, possibly
  inadvertently.  This is all for the better, although
  now to actually do the editing you will have to click in that text area first.

11/23/2019 0805 - Now seem to be past all the most pressing problem-type issues, mostly dealing
  with todolists and events, and looking at UNDO.  There are so many ways to approach this but
  so far it has been a bit spotty, with a group reload without first saving recent changes being
  the main solution.  Now, with the need to undo a full list clear, looking at the Command
  pattern and how to best round up all 'undo' activities into a consolidated approach.  First
  thought is that it should still be compartmentalized into Groups - ie, tree navigations and
  the non-group menu items are off the table.  Each group could maintain its own, separate
  list of actions to undo but when do we clear it?  It could be kept between tree node changes
  but then we would probably need a group 'save' action and take that away from automatic due
  to tree node change.
 1200 - Before that idea got too far off the ground, research into the Command pattern shows that
  it is just not appropriate to the actions here, which are a handful of actions at most and more
  likely just one or two that would need an undo, and none would ever need a redo unless maybe
  you reconsidered and wanted to undo your undo.  Too complicated.  Decision for now is to continue
  with the file-reload option, with a new list clear so that it too can be undone, and some menu
  item reorg and renaming, to make it clearer to the user that an 'undo' refers to their entire
  edit session on the current tree leaf since their last 'save'.  And - changed the 'refresh' menu
  item text to 'save', since that's what it does first.  Remaining work here is just to enable and
  disable the save and undo menu items, according to whether or not they will have an effect.

11/19/2019 0806 - Finally updated the version to 0.3 (via the About graphic).  Coverage is now
  at 89% classes, 60% lines.  This follows a few more (minimal, coverage-only) test classes and
  the code reduction from the last entry, below.

11/17/2019 0912 - Started trying to consolidate filesystem actions of copying files;
  the AppUtil has a method for this but the new FileUtils library is a better solution, so the
  mission was to switch over to it.  Traced out the usage and found the difficulty is in moving
  a Todo item to a DayNote, because I also need those status icons but for TodoLists they come
  from images, not icons.  So the code does a copy of those when it moves to a day.  But that's
  pretty inefficient, to do that every time an item moves to a Day, so I thought why not just do
  this once, when the user's data directory is created?  But then I got tripped up by low coverage
  in the area of MemoryBank near where that happens, and that caused another day delay writing tests
  for it and figuring out how to get around the System.exit(0) that is called.  The get-around is
  another (second) interface with a default method (exit), that can be trojan'd by a Test and the
  interface implementation in TestUtil.  So back to the icon copying, and now I'm thinking - if we
  do this for every user, our filesystem will fill up with dup after dup of the same icons.  There
  has to be a better way.  Thinking of that now...
 2143 - And the answer is: they are already in the icons area; just use that, vs images.  Drop the
  copy with no downside.  Working on it...

11/16/2019 1500 - Cleared up several small-potato items and then decided to get some test
  coverage increase, starting with the lowest line percentage which turned out to be the
  TreeTransferHandler that I had gotten off the web; it was a custom extended class that
  has methods that are only called by the DnD framework, NOT my own code, so it was
  initially difficult to find the values for the method parameters, and then it became
  impossible as I learned how the framework normally calls these methods.  Tried for two
  days to get around it, then finally asked for StackOverflow help - my first ever question.
  No immediate answer; until there is one, this class is excluded from test coverage.

11/09/2019 0927 - The Event branch is done except for the Consolidated List and some one-off
  menu items.  But need to makepub due to problems fixed that are already out there.  Now have a
  NoteGroupFactory that is pretty cool, and tree management is firming up nicely, with node
  removals either automatically when files do not exist, or via a 'Close' menu item.  TodoNoteGroupPanel
  and SearchResultGroupPanel both shrank, with common code moved to either the new Factory, or their
  base class or the AppTreePanel.  EventNoteGroupPanel modeled after them.  Coverage is up to 85%
  classes, 55% lines.

11/05/2019 1706 - Finished with all the Branch Helper recode now, including trimming some
  static methods and changes to how a new tree selection is handled, as well as a new Test
  for BranchHelper.  Now making a snapshot backup prior to delving in to converting Events
  to a multiple-list type like Todo Lists and Searches.  Coverage is at 84% classes, 55% lines.

11/03/2019 0735 - Last few days have been working on the Branch Helpers - the original one for
  Todo Lists and the new one for Searches, and trying to craft the proper hierarchy to reduce
  duplicated code while maintaining good object-oriented design, all with an eye towards needing
  a new helper soon, for Events.  Started off with a new Interface that each Helper would implement
  but then saw how much code was still duplicated for the required methods, so tried to 'default'
  that code into the interface but that failed because it needed to access member variables and
  you cannot have those in an interface.  So - changed the interface over to a base class hosting
  the common code but since some of the common code was static there was a problem with accessing
  those instance variables from a static context.  The instance variables were needed to specify
  different message text and filesystem locations depending on which Helper (Search or Todo) had
  been instantiated.  The common static code was provided so that NoteGroups and the Tree could
  also retrieve those specific filesystem locations (basePath).  So - neither solution would work.
  Then saw a way to move the instance variables to the specific NoteGroups and give them each a
  new static variable they could set for themselves, that could be used by the Helpers.  With that,
  the solution for a general Helper class began to be workable, and the implementation could be
  changed to a single class with ALL code, that gets its member variables set at instantiation.
  But we want to keep the BranchHelperInterface because the TreeBranchEditor has greater capabilities
  than those that are currently being used (such as making parent nodes and adding children).  The area51
  'main' app for it exercises those features.  If the interface went away then only the app-specific
  class would be available to the editor, and any test code would have to extend it but then override
  all the primary methods.  It's better to still have an interface, for now, so the new Helper
  class will leave some of its code there, and implement it, but at least it does not itself need to
  be a base class.  Made an as-needed backup at this point, in the Dropbox Memory Bank.

10/30/2019 0655 - Continuing the BranchEditor work for Searches, keep running across code
  provisions and comments that was placeholder for a planned feature that search results
  could themselves be searched and that would create a child node in the tree, with those
  results.  That feature now seems like it would be overdone and unnecessarily complcated.
  Instead, I might allow ALL search results to be included (selected for display or not),
  but no longer intend for those results to be placed as a child under a single earlier
  search.  Individual search results will not have children.  Will now remove the never-was-
  implemented 'Search These Results..' menu item, and SCR0073 for 'search these results' is
  now Evaporated.  SCR0071 is implemented, though.  Coverage now 83% classes, 54% lines.

10/29/2019 0858 - Some class changes and new methods, fixed one test, all in support of making
  Searches behave more like TodoLists, to allow branch editing.  Coverage now at 82% classes,
  54% lines.  Will work on improving that after this change is completed.

10/28/2019 0940 - Now working on genericizing some of the TreeBranch editing code, and remember
  thinking long ago that it could be done for the Todo-specific parts, if I ever needed to.
  Well, now it's needed and working on it feels almost seamless across the 5+ years interim.
 1644 - Must say, the changes that were needed went well enough and it looked ok but then ran
  the few tests that I have, and there were fails.  About a third of them, though - were VALID
  catches of code errors that were then fixed.  This is what testing is all about.  Yay!

10/27/2019 0706 - Just finished SCR0095; test coverage at 81% classes, 55% lines covered.  The
  reason for working that one was that it involved a change to AppOptions, which is the starting
  point for changes to tree branch changes that I want to make next, in both Events and Searches.
  Now, thinking that it will be the SearchResult enhancements because that will add a 'helper'
  for them like we already have for TodoLists, and then there will be two examples to work from
  when converting Events into a branch, from the leaf that it is now.  SearchResults looks to
  be the smaller effort but don't know to what degree, yet.
 0957 - Starting in on it.  There is one SCR already written to cover the work - 'allow Search
 Results to be unshown but still kept'.  An as-yet unwritten one that should go along is to allow
 the results to be renamed.

10/26/2019 0725 - Maybe the problem (depression?) had to do with wire xfer fails and the worry
  that it might not be remotely fixable.  Well that is resolved now (at least until after we
  leave and return in January), and development may have just stalled a bit, taking some time
  to 'smell the roses' after having gone through the very large revisions of going to JSON and
  updating all the Date/Time classes.  The way forward from there seemed drab, but I'm getting
  over it, slowly.  Now finishing up with the final (subjects) data conversions to JSON.

10/21/2019 0823 - Still feel like there are problems with RecurrencePanel and event aging, but
  do not have a concrete issue to resolve, and the unwritten tests for them are just too nebulous
  to get a handle on, at this time.  The way forward is to continue working the example data by
  setting up Events with Recurrence and monitoring aging, and IF a problem arises, SCR it and work
  the issues at that time.  Meanwhile, moving on to other hi-pri SCRs.
 1533 - But I didn't.  Instead, scrubbed the SCR list, looking for all remainng tests needed, but
  then in each case decided no further testing was necessary, and moved them all to Done (each one
  got a valid reasoning as to why, but none survived).  Basically the reasoning was that tests for
  those coding problem fixes is unnecessary and unnecessarily adds to future development time
  needed when code changes break tests that are only broken because they exist while the new code 
  works just fine, and what would really be needed instead are thorough tests of new/existing 
  high-level functionality, not tests of pinpoint states.  The pinpoint tests are 
  counter-productive
  until they are proven to be needed, AFTER the full functionality tests are in place.  So after
  clearing all outstanding test dev needs associated with not-yet-Done SCRs, began thinking about
  what is next, and realized that the coding desire has suddenly waned.  I think it is because I
  do not currently have a strong need for any fix or new functionality in the app, and I'm really
  only working it for myself.  Will have to see if this continues..

10/15/2019 0749 - In the recent work for dropping Date from Events, bypassed the revisions
needed in the Duration calculations.  Now looking at that, can see that the mechanism used
was a bitmapped 'known' indicator for the 16 states of the four Start/End Date/Time fields,
which allowed that sometimes the composite Start/End would hold 'placeholder' values.  Now
that we are no longer storing composite values (instead, each of the four values is retained
separately), the 'known' indicator is not used but this invalidates the usage of placeholders
as a way of persisting Duration.  So - will also persist two new fields - duration value
and duration units.  These will only be persisted if the user entered them explicitly; if
duration was calculated then they will be null.  A duration entry MIGHT have the effect of
causing a known start or end to be recalculated.

10/11/2019 1106 - During all the rework for Date removals, lots of fixes needed in TimeFormat
  Bar/Panel and also DateFormat Bar/Panel.  After doing all that and getting them to work
  well, was looking for what calls them up and - nothing does.  It appears that they were
  originally used to format the look of the Deadline, which has now gone away (at least for
  now).  So what to do with these?  There is one method in MemoryBank that they use and they
  are the only client to, that needs to move to them but otherwise nothing will complain if
  I just move all four classes out of the codebase.  They will all move to Area51.

9/30/2019 0620 - Yet another datafix and pub was needed, to put the time separate of the
  date, because a time can be cleared altogether, from a DayNoteData.  That was the only
  note type affected by this one.  Did enough code changes to get the time display working
  again, because the old 'timeOfDayDate' is now gone, and gave up on the idea of putting
  the Note date into the DayNoteData; it would repeat for every note in the group, so should
  be stored at a higher level.  Will defer that change until we go to a DB.  Now using a
  LocalTime (stored as a String), because my time strings do not need any zoning info; only
  the LMD needs that, throughout the app.  Stored as a String rather than a LocalTime,
  because storing data in other than simplest forms has already bitten more than once;
  this format should be guaranteed to be portable, when needed.  This simplification
  makes the Date removal effort realizable sooner (still working it).

9/26/2019 1209 - The Data Fix for Last Mod Date is in and published.  Quite a bit of TimeZone
  work / manipulation was needed because I also took care of DayNoteData.timeOfDayDate, as
  well as removing the base class setNoteDate and changing the TodoNoteData method that
  was trying to use it.  All tests still running.
 1809 - Now, rehabilitating all previous search results by re-running the searches.  This is
  needed because the DataFix updated all search results LMDs to current date.  With a new search,
  the LMD of the search result is the LMD of the Note that was found, usually much earlier.
  Noticing that searches are running almost twice as fast as before.

9/23/2019 0650 - Have been fighting a head cold for the past four days; not always thinking
  clearly, BUT - while working on the DataFix for lastModDate, have seen that SearchResultData
  has a 'dateNoteWhen' that means different things depending on where the search result comes
  from.  For a calendar-based note it's a date that has a Note but for todo lists it is either
  a future planned deadline/due date, or not specified and is set to null.  For events it is the
  same; some future start date, or null, although for an Event this is a more rare case.  So why
  do we want to have a data member that tracks the date a calendar note came from but for other
  types may or may not hold a future (no associated notes) date?  I don't think we do, actually.
  The purpose of dateNoteWhen appears to have been as a sort key to be used when sorting search
  results on the 'Found In' heading, which is now DISABLED - (comment excerpt, soon to be removed)
    //   9/22/2019 - Not sure when it happened, but we no longer sort on 'Found In', and this
    //   non-feature is solidified by the tooltip text on the header
    //   that says 'Sorry, unable to sort by 'Found In''.  Must have
    //   coded that at some point, so - is there still a need for
    //   dateNoteWhen?  Or do we want to bring back sorting on it?
  So here's my current determination - get rid of 'dateNoteWhen' and get rid of the getNoteDate()
  methods in NoteData, TodoNoteData, EventNoteData, and SearchResultData.  Consider having a NEW
  transient member (called foundInSortKey?) that uses the fileFoundIn info to develop the text
  on which to sort.  Consider a revision to formatting of the 'Found In' column of a
  SearchResultGroupPanel, so that the sort key can be shown there, as-is.  Calendar-based notes could
  be shown as 'yyyy-mm-dd', which best supports an alphanumeric sort.  And eventually, bring back
  sorting on 'Found In'.

9/22/2019 0317 - Discovered several days ago, that the dateLastMod has been broken, for years,
  and that any original setting before 2014 was lost during a data fix at that time, as well as
  targeted corruption/updates to current date each time a file was loaded and then saved.  Even
  if what remains is somehow trustable, the current effort to update to a ZonedDateTime will be
  complicated by the fact that no timezones were saved.  A data fix is definitely needed, just
  not sure at this point what all it is going to do.  Leaning towards 'lying' a bit, and setting
  the LMD to the date of the note, with a timezone fix based on where I was living at the time.

9/21/2019 1829 - After a week-long break to receive houshold goods, returning to the new
  effort to remove the usage of java.util.Date.  A good backup prior to any breakage from
  this, is in Dropbox (for now.  Make it an official new snapshot, if needed).

9/10/2019 0938 - Have archived the Export code, as well as reintegrated all the notes that
  had been too big to fit into Excel so they were kept in a Data Archive directory, with
  the original note indicating the new file name where the rest of the info was kept.  Now,
  the notes are re-expanded and all references to external .txt files are removed, as well
  as the .txt files themselves and the Data Archive directory they were held in.  The new
  JSON data approach is implemented and published, and pre-existing data is converted.

9/08/2019 1632 - Working on the JSON conversion, a question came up - why do we have an
  Export capability?  What is/was it needed for?  A bit of research going back >10 years,
  and I find that at that time I was tempted away from Java and wanted to make the app
  into a 'module' of the code I was working on at the time for Overwatch (called AXP; think
  it's short for AXIS-PRO which is still probably an acronym but it was in the same ballpark
  as MFWS - the MultiFunction Work Station which was a component of DCGS - the Distributed
  Common Ground/surface System).
  But that was all Windows/C# - based, and the proprietary Java serialization
  of all my data would not just load in, so there was going to be a porting needed and
  to do that, first needed an Export capability.  The AXP did have the ability to import
  data from Excel csv files, so that was the target of the Export and the line-length
  restriction there was the reason I made the 'Data Archive' directory to hold too-long
  extended notes, until I could hand-jam these exceptions into the new platform.  But
  now - that effort is long-since dropped and I'm in the midst of a conversion of the
  data to JSON which may well serve the same purpose as well as all the other reasons
  I'm doing it, so - rather than fix the Export, will probably just remove it.  May
  be able to archive it, the same way I plan to keep the older DataFixes from this
  point onward.

9/05/2019 0609 - The conversion of NoteGroupPanel data started yesterday and it looks to have
  uncovered a new problem - even though the saving was previously (easily) done and seemed to
  be working well, it turns out that the loading is much more problematic because the class
  of the JSON-ified data being loaded in is not known to the parent NoteGroupPanel.  Previously
  that info came from the serialization and NoteGroupPanel didn't look at it at that point; just
  slammed it into a vector that the child classes work with.  Now, the JSON mapper needs to
  know what to convert it to, before we would be able to get it into a Vector.  But we
  don't want to (and maybe cannot?) start introducing child classes into the parent, so
  it seems like a possible solution here is to offload at least a part of the data loading
  back to the children, as a new override.  Working this angle now...
 0958 Yes, got that to work.  New method:  setGroupData, after the group loader was able
  to at least load the files into an array of Object that all the children can access.
  It's working now for SearchResultGroupPanel and its properties, after having to run the
  DataFix again to remove a should-have-been transient field.

9/02/2019 1034 - While trying to develop more complete test coverage for TodoNoteGroupPanel, keep
  running into roadblocks due to old / rarely used or disabled code - namely usages around
  deadline sorting, and the printList.  Considering removing or disabling large chunks of code,
  but very reluctant to do so.  Alternatives are to repair the code (which may require serious
  redesign), or to allow the coverage to stay low and live with the IJ complaints.
  (Can't live with the IJ complaints, and can't stand to have it think that I don't have the
  coverage).  Ok, so will do a disable by comment-out, and add more comments to explain,
  with an eye towards some sort of code repairs in the hopefully not too distant future.
 1455 Different subject - code backups.  Hadn't been a concern since 2014 but now it is, and
  will continue to be.  With the earlier archives all buried under UberArchive/Sheba, seems
  like I need to start a new one.  Doing that now - added an Archive directory under workspace.
  Copied the current work in progress to it, as well as over to Dropbox (just to preserve
  current; may not archive it).

8/31/2019 0846 - While implementing the cut/copy/paste feature, discovered that I was commenting
  that my same-named setNoteData methods (with a different type in the param) were written as
  overloads (vs Override) - but an overload (no annotation needed) is used as a way to update an
  api without disruption to your clients (of which I have none, not being an api) - so of course I
  changed the comment, and to remove any confusion, renamed those methods to setDayNoteData and
  setTodoNoteData and setEventNoteData.  They are called by either the overridden
  setNoteData method, or by the overridden swap method.

8/27/2019 1036 - Have instituted a methodology whereby I can test methods that require user
  interaction via a JOptionPane, without needing to have that interaction - ie, an interface
  with default methods that are the same as the utility class.  But in the Test area there
  is a class that implements the interface, with methods that only do a printout vs showing a
  modal dialog.  In the AppUtil area I had a boolean flag that test methods could check, to see
  if they should use the new Notifier interface, or let it default.  Reason not to use it was to increase
  code coverage, but that coverage will only be the now disconnected single-line usages of
  the standard JOptionPane, and testing that is Java's concern, not mine, so I will probably
  just take the small coverage hit and stop using that flag.  But keep it for a while...

8/26/2019 0630 - Have had good test progress over the last week+ as well as some issues fixed,
  although found that most of those were caused by recent work.  Now, need to begin working with
  pre-existing test data to test capabilities that need to alter that data.  But to be
  repeatable and consistent, will need to either generate that data on the fly or have it
  already 'canned' and able to reset it after each use.  Some on-the-fly test data has already
  been made and the tests can remain working that way, but the more complex tests need too
  much data to take that approach.  So - hope to be able to use the 'Test Resources' folder
  to hold a complete user account that is pre-populated with test/example data.  The
  challenge here is to both make the data but also to implement the clearing / reset of it.
  For content, planning to use my new 'jondo' user; he can double as both a Marketing and
  Test user.  The test resource may be (carefully) updated each time more info is added
  to his Marketing data area.  The jondo user was referenced in a todo list item to
  develop test data (moved to a day note on 8/25).  His data development is currently in
  progress and will be ongoing indefinitely.

8/16/2019 2129 - Finally got the JUnit libraries upgraded to ver. 5, had to learn that extending
  a TestCase, and setup/teardown are no longer supported.  This will cascade changes through all
  the test files done so far, and possibly in the other project as well.  But it's progress.
  The key info was that it's no longer a single jar file, but several, but the best way to get
  the right grouping is to search for junit-jupiter, then take a version number for that one
  only and then it (as an overall package) pulls in all the rest such as the api, engine, etc.
  With the selection of: org.junit.jupiter:junit-jupiter:5.5.1, I got a total of 8 jar files.

8/09/2019 1045 - Problems in timing with running the 'showAbout' toggle test.  Kept failing for no
  good reason, but very intermittent; would always pass if all tests in the file were run.  Online
  search suggested getting a later version of IJ, so did that, for this project only.  It did fix
  the Null Exceptions although one sleep is still needed (in the test) because the tests drive the app
  faster than it would happen under user control.

8/06/2019 1346 - Added another test but this time needed a resource.  Getting the test file to
  read from a standard resources directory was supposed to be trivial - there were internet examples
  of how to do it but none worked for me, until I finally found in IntelliJ, module settings to
  specify a location for 'Test Resources'.  That was a mandatory prereq.  Future tests should have
  fewer problems in this area.

8/03/2019 0741 - Reviewing test docs, help docs, etc - have decided to delete the earlier .ppt version
  of the logDesign; the later .pptx has one additional slide, with the 'about' graphic not having
  a version number.  Otherwise they were identical except for format of the file.  Also removing
  'The Captain's Log'.ppt, because it is outdated and we're still a long way from marketing.  The
  slides it contained were just a subset of what's still in logDesign, but we'll need something
  better if the time ever comes to promote the app.  Removing also the LogDocList.doc.  It only
  lists two other docs that had been done to that point (and are still valid), plus some long-ago
  future planned docs, that I no longer intend to produce:
             VDD?
             SUM � possibly an HTML compilation that can double as context-sensitive help.
             Requirements � What is needed
             Software Design Description � How it will be done, design decisions
             Test Plan
  Those types of docs came from DoD type projects and now that I'm out of that kind of environment,
  I don't want to try to copy them.  Need to keep working to find the best approach.

8/02/2019 0520 - The updating to Java 8 that I referred to yesterday - really meant clearing up the
  92 Xlint warnings that were being reported.  Did that, but then realized that this is exactly the
  kind of changes that need to be tested, since I have no idea what might have been broken in that
  undertaking.  It all seems ok now but I don't want to publish/use the current build until I have
  a higher confidence in it.  So - testing?
 0612 - Looked at the existing tests - all manual.  Ran thru them and they do cover the areas that
  were touched, so confidence is back but with no new features there is still no reason to publish
  the latest code.  Now considering how/when to insert an AUTOMATED test framework, similar to what
  has only been started over in the WW project.
 1007 .. and to do that requires a restructuring of my files, which changes the type and causes
  data reads to fail.  So - is it already time to do a full data conversion?  Probably.
 1033 - Maybe not; the earlier move had added packages.  I undid that and used windows explorer
  to create the subdirectories and do the move, then it worked again.  All files had to be re-added
  to git, tho.
 1535 - Testing is inserted and working, with the preexisting data forms.  Made a NoteData class
  test file, got it up to 100% coverage.  Others to follow (eventually).

8/01/2019 1133 - Good progress since last entry; creation of new users - done, without a real connection
 yet to the web front end.  Lots of design thoughts on how to proceed with both projects, but can let
 the web one go slower for now while I fix other app issues such as the long-running PLAF problem, and
 updating the code to Java 8 (even though it's up to v10, at this writing).

7/28/2019 0646 - Restarted, in Izhevsk, while still awaiting household shipment.  Continuing the addition of
 having multiple users, the front end is ready to provide a new user id so now this app needs to be able to
 receive it upon startup.  But - need to refamiliarize myself with this app before making possibly
 catastrophic changes.  First baby-step:  broke apart setting of program data loc from user data loc.

3/10/2019 1434 - Now relatively stable with the two parallel projects and the ways to run them, and have
 documented much of the configuration, so now it is time to forge ahead with new functionalities.  The first
 one is to allow different users, and it should use the same underlying auth method and store for both the
 web app and the desktop app.  Since it is a 'wrapper' type of functionality that will access the underlying
 auth store via the web, it can go into the new project rather than here.  Overall app-related, it seems that
 the WebSwing access method will be the best for both a desktop app as well as a web one, so that the 'real'
 java class files can be hidden in either case.  This would call for a change here, to develop a custom
 browser window that automatically goes to the webswing app only.  That can come much later; can still use
 the pure-desktop app in the meanwhile.

3/6/2019 0820 - Have been looking into getting tomcat to host webswing along with my ww app, and webswing to
 serve out this swing app, along with a Grand Jury duty distraction (that evaporated yesterday).  There is some
 trouble with setting the location for program data, and I have just seen that my debug printouts do not work
 because the debug parameter is not evaluated until after the data locations are set.  So - considering options
 and will make a change here, then redeploy the mbank.jar to webswing under tomcat.  The process to get this all
 up and working was not a smooth one, and has not yet been documented for repeatability, but that is needed.

3/3/2019 1728 - The idea to host my WebSwing server via heroku - not going to work, because that solution is a
 Ruby On Rails (RoR) site, and more importantly, to get heroku to take code requires it to come from GitHub.  So -
 I may just put a link there, that connects us back to my new site that could eventually be hosted on domain.net.
 Meanwhile, can host it locally until I decide to put up the $$ needed for hosting.

3/1/2019 - Working with the switchover project (WhatWhen) - found WebSwing, that can run THIS app as-is!  So now,
 looking for a way to merge the two projects, keeping web stuff in that one and keeping this app working the way
 it always has, with new work as needed and without the need to change the data storage methodology (much).

2/24/2019 1142 - Ok, now see / remember.  Back in June, tried to get the latest (2018 build) to run on Adele.  It starts
up ok but hangs on configuring the tree, unable to find some referenced logging class(es).  So the 'fix' was to go back
to the 2014 build.  Then, moved on to other priorities and left it that way.  So now, can try harder.  The latest run
from within IJ - does not have the priority button problem of going forward for a right mouse click, so the expected
solution here is to do a good, latest build and put it into place.
1152 - The first problem was the classpath to the external jars I brought in, now in C:\jars, and the fact that I was
running from a script file that had not been updated to supply that path.  But the wrong priority direction problem
is still there, probably fixed since the 2014 build, or just needs a rebuild under this now much later version of Java.
Command-line building is not working, several errors/complaints.  But it works ok from IJ?
1500 - Solved command-line build by extracting IconNoteData out to its own file, vs being embedded in the component file.
Other xNoteData elements don't complain; not sure why this one did.  Maybe due to inheritance?
1550 - Solved the PriorityButton always-increasing problem, sort of.  The behavior comes from Java 10, whereas my IJ is
older now and cannot go beyond Java 8, so it still works correctly.  So for now, only, the fix is to change the launch
shortcut so that it uses Java 8 vs Java 10.  ie, no code change was needed.  During this investigation, made a few more
mbank.jar files, the latest one was taken from IJ output.  That's how we got here, in case it comes up in the future.
And it matters somewhat, because Java 8 cannot run code built by Java 10, so I did update the shortcut and the batch
files for command-line management.

2/23/2019 2127 - App has been working on Adele since the last entry; don't remember what was needed, back then, or even
what exactly the problem was since I didn't say.  But now have started a new, post-retirement dev session and it is
working from IJ.  Now will work here only to fix problems, while the main effort will go towards a new, client-server
architecture, initial name 'WhatWhen', and going into a separate, new IJ project.  Will copy/steal from here as needed.
Will do a git commit now, to 'set' the current state.  It looks like that hasn't been done since 2014, possibly even
longer.

6/6/2018 1023 - Back here now, trying to get the new laptop (Adele) to work with this program.  It is running
on Java 10 but upon upgrading here, do not see the problem.  Need to dig deeper, to find it.  Intent is to restart
work here upon full retirement, but not there yet; this is just whatever is needed to run the app on the laptop.

3/20/2016 0810 Throttling of my dev work at CA, has sent me back to here as the best alternative to being
able to work ahead.  Highest concern was that the yearview was no longer sized correctly; found now that
it probably is, but the pane separator is taking space from it.  And I had done that because of having had so many
search results that there was an added vertical scrollbar, and its width caused the appearance of a horizontal
sb on the app tree, which I eliminated by moving over the pane separator.  So a quick, operational workaround is to
reduce the search results until the sb goes away, then restore the separator to its orig value.  Long-term - unknown.
Code changes so far today have been cosmetic, while I was refamiliarizing with the app.  Git update not (yet) needed.

2/7/2014 1916 - Have spent all day on reworking the vector of todolists and the saveAs
functionality, and I very much like the end result but there has been a dramatic change
in the inner workings, mostly due to the removal of the TodoLeaf class, which had been
isolating list changes from the vector that held the lists.  Previously there was a compelling
reason to null out the todoList so that it wouldn't save any new changes onto the old
list; now we still have a reason to null it but much less compelling, to the point that it
is almost not needed.  And the removal of the old list from the vector - no longer needed
at all because the name change goes there directly!  Previously, needed to remove it so that you
wouldn't retrieve it with those same changes again (during the same app run), as opposed to just
reloading the list from the filesystem.
Now, because of the straight-thru rename, it is the new list that should
be removed, because it still has the old title and so it should be reloaded.  It took a long time
to understand all that was and now is happening and why (along with rewriting it), and then after all that
understanding it only made sense to comment in the 'new' way, so that is why I'm putting
the 'where we came from' info here - just don't want to lose the history of it all.
The AppTreePanel file is now at just over 1700 lines, down from > 2400.
May stop this work for a while, now.  Taxes are next on my to do list.

2/6/2014 1749 - All name checking code has been adopted and the TodoListManager has been
removed.  In the todoListHandler there was a 'selectList' method used by the handler for
a click on Search Results 'found in', that is now supported by the TodoBranchHelper, invoked
by a one-liner from the AppTreePanel.  The important difference from the original behavior is that
the old way would add the todolist as a node into the tree if it was not already there.  The
new way does not do that.  It was a DESIGN DECISION that the original behavior was intrusive;
if I wanted to select that 'old' list, I would have, and now I have to go back and edit the
lists and remove it, and this will continue to happen.  So - we now have a way to 'select'
(programmatically) a todolist that is not showing in the tree.  Upon leaving of the leaf,
the user has no 'tree' path back to that view (but they can always repeat the click on the
search result).  One minor concern - when the list IS in the tree and we 'select' it, it
is not highlighted as a selection, as it would be if the user had clicked on it.  May be
able to 'fix' that but no pressing need atm.

2/5/2014 1348 - With the solution of the 'showAbout' toggle graphic problem, then added a
static mechanism whereby the TodoBranchHelper could acquire the app and make that call -
no longer need the 'filesystem sync needed' warning; just unshow the editor (by showing
the about graphic) and if they go back to the editor, it is reloaded based on existing files.
The TreeBranchEditor is now usable for all To Do list actions except for 'Add'; working on
that one next.  SCR #5 is resolved by the work done so far.
(before stopping for the day) - 'add' functionality now in place, now a menu choice when the
editor is showing.  Still need to add more name checking.

2/4/2014 1217 - Have been considering the problem of coordinating Tree changes with FileSystem
changes, and what to do when one of them (mostly the FileSystem changes) encounters trouble.
After a brief hope that Apache had the answer with its transactional file system changes library
(they now disavow that it works) - have decided to allow the tree changes and queue up FileSystem
complaints, still attempting every change vs bailing out at the first sign of trouble.  At the end,
if there are any complaints in the queue, will display them in a warning to the user and suggest
that they restart the app, to get back in sync.  DESIGN DECISION

2/3/2014 1734 The 'about' graphic has been getting cut off, when displayed a 2nd+ time.  Suspecting
my custom 'CenterViewportLayout', I found a better way to center items in a JScrollPane when they are
smaller than the available space - nesting inside a JPanel with a GridBagLayout.  Now - using that
and removing my custom code.  My code base continues to shrink, as I get more proficient with the
available tools.  But to be fair - some of these tool (and techniques) are fairly new.

2/3/2014 1241 - Spawn is heading towards a shutdown; we are all on standby until that happens, now.
Meanwhile, the TreeBranchEditor is done!  At least from the perspective of its stand-alone driver.
Now, want to GitHub it as a separate widget, and also integrate it into this app.  Also looking at
providing an executable version, maybe via my website.

1/30/2014 0945 (from Spawn) - The 'TreeBranchEditor' work has been underway since the last entry
and could go on for several more days, but it is already off to a great start; tree dnd is
working, and the design (in general) is done.  Implementation of features, then integration and
usage, will follow.  Right now - waiting for an 11am all-hands meeting to discuss Spawn future.

1/26/2014 0923 In trying to add the .bmp support, needed to add scaling to the icons displayed
in the chooser.  While the .bmp support did not work as desired (so I turned it back off), the
scaling did have the effect of resolving SCR #11 after all; now by showing slightly smaller
icons, their size more closely matches the folders and in the same space that previously showed
four rows of three columns, we now have six rows of four columns.  Part of this extra real estate
came from dropping the filename extensions from the chooser display.  SCR #7 remains unresolved.
1009 The next area to consider will be overall Tree manipulations.  This may touch on requests
from SCRs 4, 5, 23, the App Direction todolist item TodoList Management, and at least the 'rename'
item from the Search Issues list.  The idea is to implement a 'tree' editor where the branch under
consideration is shown on the right (like it already is, for 'Views' and 'Notes'), but 'editable' -
to include reordering, renaming, selection for display, deletion, and a way (context or main menu,
or both) to add a new one.  'TreeNodeEditor' ?

1/25/2014 1130 After casting around looking for the next big thing to do, have 'landed' on
rehabilitating the icon file handling.  It appears that .ico file reading had stopped working
and so I have found / started working with an external open source library for this - 'image4j'.
Have already seen that it can fix the .ico files, and it claims to also support .bmp files.
As well as repairing / adding these functionalities, this work will also hopefully rearchitect
the icon chooser (into its own class?) and clear up SCRs 7 & 11.

1/17/2014 1747 Fixed the last 'Major' issue - lost notes if 'Today' is chosen from the menubar.
Decided to overwrite the last snapshot with a new one for today, right now, because I have also
done the git commit this time, and it may be a good place to pause for a while.

1/17/2014 0903 Rename of treeOpts to appOpts seems to be done; no user benefit yet but it is still
a preparatory step to saving other items.
0925 - feeling that a re-arch is needed with regard to the app/frame/tree - the tree should not be
the one who is making and setting the MenuBar.  Need to break the bar out into its own class, that
is then applied to the frame by the app.  This will simplify the appTree class and make the overall
app easier to maintain.  Also considering - changing the 'options' class(es) to properties, to
standardize the access and make the 'config' file human-readable.  But that may not be needed, as
long as there is no need to change one of those vars outside of a program run.
1116 Ok, the menubar is moved, options are loaded by the Main, and the plaf is saved/restored.
This is a LOT of good progress but did it by taking half-steps; the MenuBar is its own class but
the 'tree' still sets and handles it, because I now see that 'Tree' is a mis-name; that class
does encapsulate a JTree but it is also the entire content of the JFrame, so it may not need to give
up so much control after all.  A better name would help, tho.  And even though the Main now loads
the options, the 'tree' still saves them.  Took a 'snapshot' of this version and put a copy over
to selofain, to get a look at the L&Fs there.

1/16/2014 1057 Now:  Add the plaf to the log.options, change log.options to app.options, provide a UI
for listing the installed plafs and making a choice.  Ensure a 'good' default is used.
1253 Now looking closer, I see that the log.options file was a leftover from 2006; we now have two
different options methods - one for the tree in its own file, and one each per todolist, in the
file for each list along with the items.  So - will defer any further changes, for now, and leave
the initial default as WindowsClassic.
1904 But on further thought - the tree.options really should be the app.options, and I have another
SCR asking to keep/use the separator width, so why not do the rename and add both new options?
Considering this; will pick it up in the morning.

1/15/2014 1030 - Additional research has discovered that the 'windows' plaf looks different on
    Windows7 when the 'Theme' is not Windows Classic.  These are two different issues; use of the
    Swing plaf, and use of the Windows 'Theme', which apparently has an effect on the look of the
    Swing plaf.  Prior to now, this app has relied on the system default to be 'correct', but ever
    since the 'Metal' plaf became a default for Swing, this app has overridden it to be the 'Windows'
    (not WindowsClassic) plaf, by leaving it at the default but placing a swing.properties file into
    the lib folder of the JVM that runs the app, to force that default to be 'Windows'.  That worked
    ok for Windows versions up to and including XP, but with Windows 7 Themes we are seeing problems.
    I have found/fixed two of these problems - the 'mixed' look can be cured by using the
    'WindowsClassic' (vs just windows) plaf in Swing, and the mixed look on the MonthView was
    unmixed by removing the 'setBackground' that appears to no longer be needed (but once was? - need
    to verify this by looking at the new code as it runs on XP).
    Finally, I want to stop the use of the swing.properties file.  Did that, and removed these lines
    from the InstallIssues file:
Need to put a 'swing.properties' file into the lib folder of the JVM:
(complete file is below, between the '==' lines)
=======================================================================
# Swing properties

swing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel
=======================================================================
For running the app from IntelliJ, the location is the jre\lib that
is under the current jdk location (not the standalone jre)

1/13/2014 1621 - It seems like the L&F problem comes down to two separate issues:
  1.  Some of the Win7 UIs are mixed; seems like a win7 labels mixed with metal buttons,
        backgrounds off-color or missing, just a strange / bad look.
  2.  Set lib L&F - control by a switch, vs landing on a 'default'.  Especially when the
        default must be placed in the 'swing.properties' file in the lib folder.  Need
        a better way.
Needs more research..   (now looks like the JTree may be going one way, while the rightPanel
goes a different plaf.  Still investigating, but may do San Antonio tomorrow).

1/12/2014 0926 - The effort this morning has been to see if there is any downside to pulling
NoteData out of NoteComponent; the reasons originally given for having the two classes in one
file are seeming increasingly invalid, and upcoming architectural changes will be better supported
if the data is separated from the visualization.  In the process of doing this, much more 'greening'
is being done, and I ran across another case of finding a long sequence of 'else if's following a
single deliberately irrelevant (and therefore empty) 'if' block.  This prompted me to want to go
back and reuse my 'no-op' solution but after spending about an hour to track it down, what I found
is that I never had one; I had done a rewrite so as to not need it.  That is probably the needed
solution for the new such cases I am finding during the 'greening' continuation.
Follow-up to that:  the next best thing to a no-op may be: System.out.print("");
1153 Embedded data classes removed from NoteComponent, DayNoteComponent, and an unnecessary
declaration that was made only to control compile order, was removed.
Next: clean up remaining 'xlint' issues, focus on L&F problems seen as a result of Win7 vs XP,
and classic vs default.  Do not believe that these are listed in the wishlist or the SCRs, but
it 'feels' like this is the area of greatest need.  This may be the beginning of the
rearchitecting effort.  One specific: bring back the query and listing of available L&F.
2145 - Finished cleaning out the 'xlint' errors, a good bit more greening.

1/11/2014 1131 - Continuing to rescrub the SCRs.  May have fixed the 'duplicate/lost to-do
item after a clear' issue; checked in a one-liner and will see.  Moved all current 'maintenance'
issues to major or minor problems after better defining that category.

1/10/2014 0942 - Took a look at the recurrence panel on an XP running Windows L&F, and it is good.
However, running the 'default', it is not.  This means:  We now need to handle different OSs AND
different L&Fs.  Maybe there is a framework that I can use for that, like web apps have?  After
research, short answer is NO; it simply does not (can not?) exist.  Next best thing: develop with
the UI portions as interfaces, provide a different implementation for each and detect/switch the
interface depending on the OS and other factors.
1046 After looking over the SCRs spreadsheet (and adding analysis for a couple of them, including
the nefarious 'duplicate or dropped' to-do items), I want/need to reconsider the overall architecture:
Of course I want this app to run everywhere and look great, but the 'cost' of trying to get there
from the current state seems too high.  As long as the app has as many problems as it does and I
am the only user, it seems that I should concentrate on the easiest track for me and just fix all
issues and add all new functionality first, using the platform/UI I am already working with but
converting to interfaces wherever the possibility for that is found.  When the app is
more ready for prime-time, it would then have at least one deliverable version, and the next phase
of work would all be towards going cross-platform, only.

1/9/2014 1002 - Finished 'greening' many classes, including the program Main and the AppTreePanel.  Then
while looking at xlint complaints, saw output from the RecurrencePanel (events) so went there to see
how it functions - the L&F is all off (mostly too short containers for text labels), and verified
this is also the case when running from the older jar file.  Suspecting that this is a Win7 issue
and that XP may be ok; need to see it on whitey, but will put a copy over to selofain for future
reference.  This seems like a good point to make the next snapshot - the first rev after the rename.
1205 Just noticed that the global rename of 'log' to 'Memory Bank' also affected the SCRs.  That might
actually be ok except for the last two, which came from 'clog' and were addressing the naming
problems.  Restored those two from older copies, but now will update and resolve, anyway.

1/8/2014 0448 - The first rev of the new data location approach will not stand up to running the app
from a new .jar file if the jar is colocated with the dev code, because then it would use the dev
data and not the 'good' data loc.  Working on this..
0552 - Took a sidetrack to nail down questions on the swing.properties file - yes, it is still
needed and it IS still an installation issue.  While Windows 7 does not support a Win XP L&F,
we never developed for that one anyway, so the 'basic' / 'classic' Windows L&F CAN still be
specified, and it does look better, IMO.  Need to continue to consider it, so even if the
'InstallIssues.txt' file goes away, keep the info from it, somewhere.  But then, with regard to
the data naming and location issue, now adding more notes to that file anyway, so it is less
likely to 'go away'.
0631 As much as I liked the idea of running the 'installed' version right out of the dev loc,
and after considering keeping it that way by using program arguments, decided to leave the
data location decision as-is, and go back to having a separate 'installation' of the app in a
different location, where it does not have the appData subdirectory so it will revert to the
'official' data.
0652 So what remains on this is to choose a better name for the 'official' data directory,
and to continue fixing/changing the name from 'log' to 'mbank'.  Next up: the jar file and
name of the 'official' data.  Did those.
But to explain the reason for having 'appData' (dev env) named differently than 'mbankData'
(production) - just don't want to ever think that data that came from the dev side needs to be
preserved (even if it does, because in that case I should have put it on the 'production' side
either in the first place, or shortly after it was created).
0844 So now - the initial goals of the current effort have all been met:
1.  Resume the dev env and convert to Intellij
2.  Rename the program (and revisit deployment methods and locations)
3.  Rename the data (must not be the same as the app)
And we even got an extra:  can now have dev data, separate of production data.
Next:  clear out the stragglers - any class with its name starting in 'Log' - should get a
name change.
But first - I want to take the 'Better Programmer' test..    and it wasn't pretty.
1344 So back to it - class renamings started, and found the 'missing about' graphic cause: the
'about.gif' is not there!  Just copied the last one to a dateless name, to fix.  As
for how it HAS been working - probably there was one in the 'log' under Program Files, but
as for finding it in the source - it was not even in the one from 2011, so at some point
before that I must have renamed it to the latest dated one, and didn't see a break because
I wasn't running from a dev env location.
And apparently - I haven't really run from a dev location since 2008; back when I originally
created the about.gif file and put it into the production 'log' folder but not into the
development 'images' folder other than the one with the date in the name.
1403 Renamings all done with apparent success.  Now I want to make a new splash screen and
'about' gif; the previous one is waaay obe.
1852 Basic redesign is done; one font (and the overall background) needs tweaks.
2144 did those (after a long break; it didn't take that long).
Next:  clean up warnings from IJ and xlint; green-up the code as much as possible.

1/7/2014 - Cleared all older notes; moving forward with the new program name.
Next step: work on 'pub', and establishing a new name for the user data repo.
One-stop reference for how tests are getting things done.

0.  Make / get rich test data:  This is done by using the app to make the data you want, then manually
    copy that entire user data collection into Test Resources.  The setup for each class can clear out
    existing data and reestablish it from the resources.  See AppTreePanelTest setup.  There can be
    different test user data sources (like jondo) but at test runtime the specified one gets copied to
    the development area data repo, under test.user@lcware.net.  Then later you can just run the app
    as that user, to see the effects of your test.  Be sure to run a full build after you've made
    changes to Test Resources; as part of the build they are picked up and moved to the 'out' directory,
    the 'real' location for where resources come from.

1.  Select a node on the main app 'tree':  instantiate an AppTreePanel, get its JTree with .getTree(), call
    setSelectionPath or setSelectionRow on it.  How you get the path or the row if you don't already know
    which one you want - find those answers below.

2.  Get the TreePath to a node with a known name/text:  see the testCloseSearchResult test in the
    AppTreePanelTest class - it does that (in several steps and two external static methods).

3.  Get any NoteGroup:  With the list name (essentially the file name, or close enough) known, the
    group may simply be constructed directly; no need to instantiate the AppTreePanel to get the JTree;
    the tree is not needed if you only want to call group methods.  The constructor of the group loads
    the file into the group's components.

4.  Set a line in a NoteGroup (new or existing) - get the corresponding NoteComponent and call its
    'setNoteData' method.  Call initialize() on it first, if needed.

5.  Get a NoteComponent:  call getNoteComponent on the NoteGroup instance.  Parameter needed is the
    zero-based index number into the group.

6.  Load a DayNoteGroup with the notes from a specific day:
    Normal construction of the group (no params), then call setChoice() with a given Date.
    Construct a Calendar using YEAR/MNONTH/DAY, then get that Date with getTime().   See ReuseNoteTest.testReuseDayNote()

7.  Convert a to java.util.Date (myDate) to a java.time.ZonedDateTime:
        ZonedDateTime zdt = ZonedDateTime.ofInstant(myDate.toInstant(), theZone.toZoneId());
            where theZone was made by something like:
            TimeZone theZone = TimeZone.getTimeZone("America/Phoenix"); // Sierra Vista, Tucson AZ
        Alternatively could use:  ZoneId.systemDefault()  to get a ZoneId.

8.  Convert a java.util.Date to java.time.LocalTime or to LocalDate:
    Date theDate = (whatever)
    Instant instant = Instant.ofEpochMilli(theDate.getTime());
    LocalTime ansr = LocalDateTime.ofInstant(instant, ZoneId.systemDefault()).toLocalTime();
    LocalDate ansr = LocalDateTime.ofInstant(instant, ZoneId.systemDefault()).toLocalDate();

9.  Convert a java.time.LocalDate to LocalDateTime:
        LocalDateTime atTime(int hour, int minutes)  (and also seconds, optional)

10. Convert a java.time.LocalDate (myLocalDate) to java.util.Date:
        Date date = Date.from(myLocalDate.atStartOfDay(ZoneId.systemDefault()).toInstant())

11. Convert a java.time.ZonedDateTime (myZonedDateTime) to java.util.Date:
        Date theDate = Date.from(myZonedDateTime.toInstant());





